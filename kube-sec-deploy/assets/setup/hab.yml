---
# Source: harbor/templates/chartmuseum/chartmuseum-secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-chartmuseum"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  CACHE_REDIS_PASSWORD: ""
---
# Source: harbor/templates/common/certificate-secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-certificate"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFVTVJJd0VBWURWUVFERXdsb1lYSmkKYjNJdFkyRXdIaGNOTVRrd05UQXpNRGt3T0RBeVdoY05NakF3TlRBeU1Ea3dPREF5V2pBWE1SVXdFd1lEVlFRRApFd3hvWVhKaWIzSXViRzlqWVd3d2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURUCkxuSWw3SHpZUW9uRkY0SlVqOGR5eHRDR3JLcjJqUGcvMGpxQTNCVGZ3d1ZCMUFTbDZjTmhJTGIzMkw5dWROM00KWEhMZWZtL0FpNWgrVVk1K0t6dWRXSEdEOHZnMEFRanAzQ2FvaHk4emdaSmZPMmZHYTR5TVdKYzdYWkVWaStUeApLWmUwU3FaYXhlOGRTVUxveml0SG5yUFhSMnpLc3kyclRicTVEZ0ZpK2xPdWs3elZ5dWFwZm16ZHFzN2ZOTnp0CmFJaUdVemptaG5BV0oxam5FZUlJYXI1UkdSQ1FxcFNKalk0cmw4d1BmYzh1VVh6V0ZOVGc5ZGEzUWdxNVlicnkKSGxSUGhac1Z0bUEvUThnaHI2bWVxaTEwNkFnVytiVEVxQklyOHBXdHNCak1EdTFQTGViTFRPOFJsbFVoTkIxbgpJb3MvMVM3cWlHYTk1TXlJQk9PM0FnTUJBQUdqV0RCV01BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFCkZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQVhCZ05WSFJFRUVEQU8KZ2d4b1lYSmliM0l1Ykc5allXd3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSWVPc25zRDcwQ3NSSGpPTmt6TApveTVxY3pJdUt3ZjRvTzR4OVhGSzIzK2kxcjRTNDZ3ZlNGOGJlaW14M2RZK3RIRTBmbzlWTmJBaG9henA1ZUFCClMzZ2t2eEY4U3BoelBLZjlKTi9lVDhaZmZFUytaR1NKOXloOG1uYndCOG1NbXNBR1IwUFNkUkY5VDdTYTVJN3IKNmRINTRYVEgrKzVaMDZ6OXRJaEJEUmw2RHdCbDVJeGZUalIvOVU4a0Q4QjM3b2IzMVE0c2FQRW1sQTlmb09WMQpJYXYwOVBqYjdkOGZaZTBxR0dUWUlweUhOZDQ1OHVhcDN6dHRTd1JCdGRlcDlZNHpyMlJ0NnhhcW5NeEEzbDA4CnRyY2xrTnhMN21JVUJ2NGZ0aGVERkZJcjNuR0RBUFhXa0YzZzhOUEU1OTRIRzZiemNPWW5odHI3M2N4anQwTmsKQSs0PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMHk1eUpleDgyRUtKeFJlQ1ZJL0hjc2JRaHF5cTlvejRQOUk2Z053VTM4TUZRZFFFCnBlbkRZU0MyOTlpL2JuVGR6Rnh5M241dndJdVlmbEdPZmlzN25WaHhnL0w0TkFFSTZkd21xSWN2TTRHU1h6dG4KeG11TWpGaVhPMTJSRll2azhTbVh0RXFtV3NYdkhVbEM2TTRyUjU2ejEwZHN5ck10cTAyNnVRNEJZdnBUcnBPOAoxY3JtcVg1czNhck8zelRjN1dpSWhsTTQ1b1p3RmlkWTV4SGlDR3ErVVJrUWtLcVVpWTJPSzVmTUQzM1BMbEY4CjFoVFU0UFhXdDBJS3VXRzY4aDVVVDRXYkZiWmdQMFBJSWErcG5xb3RkT2dJRnZtMHhLZ1NLL0tWcmJBWXpBN3QKVHkzbXkwenZFWlpWSVRRZFp5S0xQOVV1Nm9obXZlVE1pQVRqdHdJREFRQUJBb0lCQVFDMFhjajBod1VpRjhKZgphWExSRW5RQW5ibmdMSDFnVW9wOHgrdGJ2NXk4ZUc1M0NNUm5pRDV0S0duZFNXeEd4TjNpKzFySW1TaU5SUzBiClJrRHpsYTAyK0NFTDEyc1J6NGh6WktwSDZoM3dXY3hRTmdhdU81RXhGVUVsWFFiYlpqNUZrNGFVWCtXeFJiaXkKUks0MjlFK1d2ZjlQOFJzRURRRUdmRDdzYXYvWUxmUE9pdzh1aGJQZGFyQzY3R0N4Zm9hcTFQbDd6ellaSFJ0dgoyVFA2VmRtSll2OXppL2FVWHpERDNmMlBvMzhzMEJaQkZKeU9TcWhNb25tY2ZaSzN5YXJ1SVdGU0RPbFV1VE1tCnJmK3NQVk9TcFd2aVRPVFV4L3hHRkRSWUwrWUQrc1RYbFhNRm1FV2FyckMwMTk2eklwZ3dIOEJMZ2Rmcmx0aG0KUjNLTExXdEJBb0dCQU40Vm1jVWdqcko2YlEvMXBEZWVzRkdOSTBUM3E2N0h0bGxRc1NhWUUrUUdiOFhENXl2QwpTOVRCb0xBSVlkRGx4WFJ1M2tSTXBzeHFlOGlFd0tMeHREbFp3aldBeDFOYSt6cmZ1QXJ4VzJyUXJMb1d6QjlPCm9mL3B3RldRbWR1RVBES0lkQzFhYlIzVnQ1VCswV2JKc1Q0RXFTdStSelQwWlh3NGZwNkg5RXFIQW9HQkFQTnUKbUF5VERHUGhnY29QZll6NHBMUjFhVUdkVGhBZnV5OXZ5OUJ2eVFwTHVNd0RCWHZuMWpJcmVFRUFTcUdzNlVsZgpSZ0lrM3NKZkxQRzZJaUg5a2h0OHFUYnpEQTA4UUdrbENTVHFkWHljbkFObU1RWlk5cmNEZGhkWUpFYmFwWmVJCmlTWGxVT1JqR2ErUWRQekgwRDN0QkRTMXpWNVRlcVZoMDZZQjVQbFJBb0dBT3E5dWtON0hsbll2ZDdZcmpOOE0KTEtDbEgwWnJRYVpZazBWMWFvTnBUaW85UXY4L2lScXd1eW5uY2x6a3JEVHJkcGNOZVBMZ2FNZ0NxYndhdzNRbgpjYmc4VDdNVitQcmp4R3oxeno1MEw4ZXd2UVBsTUtpd3VsVmtrN2ZBVUhlakNKOXlROEhQYjhEWDRERnQyRUdYCjZwR0V1cUJ2Wkpqb2NHamxYTE1FWk9VQ2dZRUFnQXNrSHprWncwL1NuUjRZeEJYbFRLYVZmdFhuUWNQdkNieWMKVUQ3OFdGWU1GZ05nMXhQVEx3QitlSEpXejBQTVViT3pkMTA5YnEveFRCVEQ3MjBaZFN2Vk5mb1IxTVJrZk9ubQpMV3pGNzQzUTRsaldZS2hhM1ZrTXZLcTRLaXpIL1RUc0x1cTM2ZW5Xa09wREh0TmJUYmRtQnZPNTJtdStqMDh0CnJKeENmSUVDZ1lBd3JEaGlXQ0c1SDBqZXlXUjQ4WTU2bkNLSmZycUN0ZzVlTGhLcW45U0JFQXJma0pLMHRFZ2kKUFdHbGxDYTBOeERSc3l0VEVZY3ppU0JDOUhHSWdMampPQTBKTkw1Y3p1WHo2Wjg0NjE3Z2F0d05RT2hjRGpCVwpaYmJlbG1jQ0haNUJ5SGtjMGthM0ZXTmxqTCtaM3gycmtIbTZYLzZBVmthQVYyVGRFRGlTVlE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1VENDQWMyZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFVTVJJd0VBWURWUVFERXdsb1lYSmkKYjNJdFkyRXdIaGNOTVRrd05UQXpNRGt3T0RBeVdoY05NakF3TlRBeU1Ea3dPREF5V2pBVU1SSXdFQVlEVlFRRApFd2xvWVhKaWIzSXRZMkV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ25YVlZOCmowSVAzVGtaZGRHNXRlbUgvWE43Rk1FVVJrczZ1RmNGM2JzbEhmNmFOMDhQcVZJbkh2am04ZzZwVEJ5RFg5eGgKRjdoLzZ1TUp2bjZramdwRGFxcnhwaWUzcVRmYzYxWlAvTk5WRVZkeTR1TkhpWGFiM1Y5WU5RSEJIQUNzU1dLYgp1UjFVSmVLZVh3THZmN1UxcDdPTGhsMzZPT1RidU55emFzSFppbklqaXB1cjlVUTRoQit3bTRVdGUwNGdxc092CnNPZmlqMkJ3eDloYjh4STN4Y0tsREJhMGRGZW93TWpHZ29xeG9HZnBTeFRBQ3JwaEsySDhmRDAzNFhRSFExeHYKNVpYYklvVUxybWNtNjA1bVRTUDhOZ2FQQUt6ODA3MVNLZ0ZEYXZnMXZXNTB2QUh0blNNWTBDbUVQbkFzVWlSQgo5bFhOeHpoY2w0VGN4MXJ0QWdNQkFBR2pRakJBTUE0R0ExVWREd0VCL3dRRUF3SUNwREFkQmdOVkhTVUVGakFVCkJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU5CZ2txaGtpRzl3MEIKQVFzRkFBT0NBUUVBZlA2dTVMT2hVa0U0YTQyUGg4UlozaDhvZ1gvU2R4SnRrZEVUK05ycHJza3FBWHRCbU9YdgpDTUZDQ042bGlveXlWM0hST0Z5VWNYcHlneEhyR09xT1hHdkNuTlNCaVpleno5Uk8vOWdUL1pWSG5aYlhnK2tGCmN2RGh4S3YrZDk3dzBENDdlRDlVVVpTRTR5WXkvemZHZ2R1bmRMU21HLzh6WXlDZ1JmZTl0Y2ZVWXRMUmJYNUEKMlNwUWFIOFoxYndaWnpnVWk0YkltTThxdGVxemlod3NFaFdUeEMyZTc1L1hwSXplaEZldzRUVWNJTzA0NHFuSgpYUHlHTHUwajBxTTc2ZXBONUdWTWZ5MmlzVnk2SnpZVENZM1RzWXg2UEFSRHpyVkJ6Rjd6S1V0eFlXMkg5T1dTCkc3YnJOL1VsN1h2YnNuck9FQUpma0JoRG5VWmtmdFhiTkE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "eDNiRnp5VHJTNERtQXkweA=="
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUwekNDQXJ1Z0F3SUJBZ0lKQVBZL096TE1lVnEyTUEwR0NTcUdTSWIzRFFFQkN3VUFNQUF3SGhjTk1Ua3cKTkRFNE1ESXlOek0zV2hjTk1qa3dOREUxTURJeU56TTNXakFBTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBZzhBTUlJQ0NnS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQWFOUU1FNHdIUVlEVlIwT0JCWUVGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUI4R0ExVWRJd1FZTUJhQQpGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMCkJRQURnZ0lCQU1Bc0V0VmxFTE13ZHRjaWZIZU9UMGtPbWY1d285SW4vZUZTZ3NjQ3pCTURhUngyQjNxMzZBb1MKSWw3WFdBWnBldmFSN1c3eWVBUkthQXNoQkxoeWdVcUxEMHpXYktsU045SHByZDF3ZHBNMGZmeVBwTjVkeE9ZQQplcjA0eTEyR1JuQ2JNWXFpNGN2enRQNFRpblhxcTJ5SFNZaExiTzlxa0k1Z2JXVnhrUnVJY01Ldml4ZGRsbE5ZClEzb2JKYURESG1vdk0zK2cvRysxWUZndDRxRVMzOFhuSjdCclNzaEhubjVFSVFoMjg2eGZKcml5cksyaEhiTEoKcXowWXVGNkczRFhQZVdHZ1h2ajBIaXBjMGY4VURaa0tray9lR0VJNnZFa3l0eXZvZXBvWkkyWGJBZi9aTXk1bgpLd3VoRW40aGhrRk13V2FTV3AvaDBRZE1DYXhrNEJWU09xbU5WYUxTQjcrRmpzSWo0Q2FzRm90WWl5SjJncFJCCk5mOFFhUzRiejBUbjFlQmJDOGtzaitlM1pXZVgyYjV3Vk1qcWw5alR0MlgxSUNzOEtLZTN2RUJranFUMkFVaTIKNTJUdEt6bTczYVdyei9HUHkvUTJMQ29yM0ZoOUZHVlNCT0JCRFhHeTZNSnBOSEpuWVZIOUVFTkZHT2g4NW9sMQoycEFET0JCNXZBVS9rTEI1TEhQajJrdWUvRk1pSGFObnJTWUlHck1sQlNYMmpqOUVZYTF1dVVIK3BkNE1CajFGCjV1SDhPUmlhUTZodDIrV0hrbHhpYzFSajV5VFlRd1ZsSDcwQ0JPbitxVkVkbzYzeVF3ekFNSktGSXdsR1VRRVgKamlsamdjODZxNGNadFVURnJjd01pZGJrKzhRNitKYkRWZzdIVi8rcG5DK3dudjE5N2t3ZQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQVFLQ0FnRUFrOHE4czRQcnZZYnk3OVVWbFdKTktxY2V5a3dCa3hFMWZqcllPUldRMmhpQWlyeEdWNSs4bERULwprNnVqbTFFV3diNUswSHh4UktrYitQRWExSHFOTkhFNkp4TnBKS0s5ZXhEbFlBUSt4N2RGQnFWci8ybmF6bW80Ck1COE1MWWxtSXp0V1dvU1l3ZThvMm1FZzRxK2J4WXM1SW1kdTdBa2hFN2RKNjNobTIzZ0xNZmVNTGFsUnFvcHUKWEJQd0U1blhQNmFHdVVOSHRHMUs4dFFKRGxaWStMRWJBZU9mUmVOUWhUOU5kUnVrWVNXNTc5dmZLYmxKclN2egp1bGc4OXNWbTNjV0VLNXBCNnJqOXdKYks5NHZvS2Z0VnFiYnVCd1dqZDFhOXBpYktod1ZCZTJMMkZXaHBTWmM1CkYvY29DN25qVGFZVDZ0cjkxeTVWaGhKaElaUUNmL3Z2NFpsNVhoRkhzNVZUWk5iTS9PZnF5RlFMWVhWSk80OEsKRjd0bWF6QUVRUUJRd1ZacUg5QzlOUWR6UEhXbWMzOE9raHRjMXd6YXFuL3JnOSsxc2dBTUQ4aFdDdFFKVWU5NwpiOXltaDVBMFo0UVhLcHlGVDBiK3BYY0QxalJoYTA3VXRrWCsvekxKOUhwQVhjVW16a0crajVDWE5wbnhzSXE1CmZKRmVxM2hCajl3Nm40aCs1ME00VzBGc2U1WW9FVXNjM0IwZno4QmxRQmIrWUpMRkxOSDM0TUg4cDFsMFpEWUoKeWFlMHBzeGxCaWpnNE9QWitXQ0JhK2p0Rlc0TGlXZ0VjeHdnejh3K2hFT0FRcjJhMURjN3c4amQrWTRJSzhVbQpsVFZzNWRicDRtT21QTWxSdi9HTTdrRHVkRnFiTWczWUZ3WGczUWJxdVZxTFp6RXpqVmtDZ2dFQkFQSktaYkNXCllmTGVqa1MvZmtSeVYzVkliNTRtS3dRSG9NV3ViODh0UGdHdVh6anNKeWQ1UVRRNThQcFVqWHJMSG1uOGxTMisKdmlFOEdKeWxLd04xeU1sWnc0MCtrWmhwSFVwQ1d4LzJaS2pBcXZxQTlPT0tvMmZ2NkhkL3dPQW5VNEN0aW9DMQpwcmk3bEtGWVhvUDhEdFFWd0hZdkl6Q1JxRG5oYzRtd0pEcXpUQzl4ZHVJK3N2eHpsNHhIODJmeDBqclBpRlkrCi93T2RYanlmSVBqeWhIQzRqUFRXYmFpcndYUzlkQmpTbDEyOGFJUlQ1ODAveVhFL1NZQXVnZzA1akt0ZzV6UUEKU28xM01UZXpYUkhYZE8wZGkzdEVNSEdSRUVrRnBlVm5uUFF2Q0NlZEswRFYzNmlOd2lXYzhwd2RmTE1WbmVUdApES3daZWRDeCtvLzdldjBDZ2dFQkFPdTQ4REdFSkpKekh4VlI1bVkxSzJBbFp5WXRwVE9XZWhLMXpYNzRKdk0zCll4TjRuZCtaeDVuOXVTUG1tS3pxRjNUVSs0NFJWdGRKSzZlam9GRThkTURUTldhU0xXL1pEbU4xblQwbmp2T24KSVdKbjU5eW5PQ2hXV0taZ1haLzlVcUdSN1B0Nk94U2trZXg5Yy9mWUJzTVgveHVzZFhRaWdlb2dsMGlPWVZGVwpnWElpaUxSTEhwSEpzSy91TnhJaXpqMGhUWVluN3VEN1BSRU53RlJjQ1lmOEoxZVVGYmQ2RHVDVldlUUNLV2dmCk5kMnRTV29pMFZ5bGo0dVVYOEl3MHRqTE5NRDVDUkVKRWs0R1N2NEVEU212VWR2MUxpQktKQ0wybEVjZ29QZUMKb09EMmlDYzVLcWdubVFyYVJpbEZGazhSVlhBOVBXWkdZM0MwYjZUVm1tY0NnZ0VBTlpPMkFPS0FMbENBYlR0YgpGSStrUDA4UlA0dDVINThBTWpac2l3ZWFHbzBRaVduUERxK0ZkNk1JWXBLbjVtdGNBbHZVTVJWb3ZiaW9TSnROCmM2cHNCL3BOZjhKQ044Mm1xSEViN1dseXdNNDZBTUxiWkNXWUZMZThWQkJ2K2lFNEdkQkdQRWZ1NGhLNHZ5VG4KWVpBdlJ6NjRIR280QWRsenRiamc3NlYvbld0Z2dXMDV1TFhjcG01NUtKQVFodisyV1VMakJ3OVBIT0dEb1N3ZgpBbTIrVTU2N3JMaHQ3MHByc1FEajEwbGFKMlF1U0hTMVlYR2xmZUZjdzNlRlVwOVROK0pwdmRvQ29sMmxDSWdsCklIamdaajZPUldmQ3Zwb3hXN1JnQnVadWtxQ0QwUjYwSGRZdGF2eE4zanRpZXBzYXBBODNweE8wSmFwTWdaV1oKcnBVUmtRS0NBUUJPY0V2OUxpdTlUL0dYOXBqa2llelZJWjBoWnk4QjY2RFRlUXZZcEZyUnRDeVQzaDhxdU5GaQp2THRPNXYwSERSNmhFZjVqV0FHOXdldDA3VTM3dWxKZmwraTlLUWRWb0xUWkE5bys3MXJ5V1RzU3MrREQzQ0VqCnl4ZlV4VnhpVUxtZWFpQ2h6aHE2MDhoN0dZUHRoVVU2eGxGdHRBV2hqNW9MZnF6WXlBZzZPTDc2YStOeG0wMmcKMWF5bDNtOFU2ZUFYRjIza3BvVW0rSE5wcVZuR3VKbXpWb1VBNzVZS1orTnJlRWRoU0JiZlB3TjlzSnd0WlVpbAp1N0g0a0hjTTk1SXg4ZXlzQ2pLcUtJcWV6QmxJVGJEVG5qTnZMamNiSjVDKzBhNmx2SVhUMXZRUjUvZUdsYzlNCkJXRTM2MHBOa1YvTEQ4bU9mOUplcGkyUTQzb0RMOUVoQW9JQkFRRFRXSW1meTBLOWdHekEyclB5MTY5bVdZUUsKT2xjbkQzK2hRcTZ4NTFabjFlL3RleEZlVmxoSG40cnJuUmRDRk9BcDQ3dUZrSjJtNzJHQ1ZENzRFd1F1Y0s5eQpBRDVqb3JxZ1ZIcUNLWmRrSGpiMlY2ME16bTZnM3J0TDlXSlhGVkx2TkJiL1FHQjJ2Z0hWT08wenFpcUdaajRlCkV4N2wybS8vNVNFNERMdG43MEo5Q2dHMUh0WENTOGRXckdQTDFwekRuazhWWHRub1h6YjBMQ2hMVUZFZ1pSbWgKY1Y2QUZIRUsySDh3Qkh2aU55ZWhzUlFpRGtsMkFpV09jSk52a3pXNjhjazJuSmpSV3lQWUsxSkwzTkNLcEIzUQpPb2hyUDBmSGNXQVhNVzk3d0ZYWmhSZm5RZkR4eElPbGozTWNZVDBBbGFuWGQwRjROR2MyTnZtcGh4MDQKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  CLAIR_DB_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-database"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secret: "MFE3S3JVVFlzN3c1N0g4Rw=="

---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "UjM2MG1TZTBQNXozMUFhMA=="
  REGISTRY_REDIS_PASSWORD: ""

---
# Source: harbor/templates/chartmuseum/chartmuseum-cm.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-harbor-chartmuseum"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  PORT: "9999"
  CACHE: "redis"
  CACHE_REDIS_ADDR: "harbor-harbor-redis:6379"
  CACHE_REDIS_DB: "3"
  BASIC_AUTH_USER: "chart_controller"
  DEPTH: "1"
  DEBUG: "true"
  LOG_JSON: "true"
  DISABLE_METRICS: "false"
  DISABLE_API: "false"
  DISABLE_STATEFILES: "false"
  ALLOW_OVERWRITE: "true"
  #CHART_URL: https://localhost:30003/chartrepo
  AUTH_ANONYMOUS_GET: "false"
  TLS_CERT:
  TLS_KEY:
  CONTEXT_PATH:
  INDEX_LIMIT: "0"
  MAX_STORAGE_OBJECTS: "0"
  MAX_UPLOAD_SIZE: "20971520"
  CHART_POST_FORM_FIELD_NAME: "chart"
  PROV_POST_FORM_FIELD_NAME: "prov"
  STORAGE: "local"
  STORAGE_LOCAL_ROOTDIR: "/chart_storage"
---
# Source: harbor/templates/clair/clair-cm.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-clair
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: clair
data:
  config.yaml: |
    clair:
      database:
        type: pgsql
        options:
          source: "postgres://postgres:changeit@harbor-harbor-database:5432/postgres?sslmode=disable"
          # Number of elements kept in the cache
          # Values unlikely to change (e.g. namespaces) are cached in order to save prevent needless roundtrips to the database.
          cachesize: 16384

      api:
        # API server port
        port: 6060
        healthport: 6061

        # Deadline before an API request will respond with a 503
        timeout: 300s
      updater:
        interval: 12h

      notifier:
        attempts: 3
        renotifyinterval: 2h
        http:
          endpoint: "http://harbor-harbor-core/service/notifications/clair"


---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = dev
    enablegzip = true

    [dev]
    httpport = 8080
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "harbor-harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  EXT_ENDPOINT: "https://localhost:30003"
  CORE_URL: "http://harbor-harbor-core"
  JOBSERVICE_URL: "http://harbor-harbor-jobservice"
  REGISTRY_URL: "http://harbor-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://harbor-harbor-core/service/token"
  WITH_NOTARY: "true"
  NOTARY_URL: "http://harbor-harbor-notary-server:4443"
  CFG_EXPIRATION: "5"
  WITH_CLAIR: "true"
  CLAIR_DB_HOST: "harbor-harbor-database"
  CLAIR_DB_PORT: "5432"
  CLAIR_DB_USERNAME: "postgres"
  CLAIR_DB: "postgres"
  CLAIR_DB_SSLMODE: "disable"
  CLAIR_URL: "http://harbor-harbor-clair:6060"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  WITH_CHARTMUSEUM: "true"
  CHART_REPOSITORY_URL: "http://harbor-harbor-chartmuseum"
  LOG_LEVEL: "debug"
  CONFIG_PATH: "/etc/core/app.conf"
  SYNC_REGISTRY: "false"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL: "harbor-harbor-redis:6379,100,"
  _REDIS_URL_REG: "redis://harbor-harbor-redis:6379/2"
  PORTAL_URL: "http://harbor-harbor-portal"
  REGISTRYCTL_URL: "http://harbor-harbor-registry:8080"
  CLAIR_HEALTH_CHECK_SERVER_URL: "http://harbor-harbor-clair:6061"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "harbor-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
    job_loggers:
      - name: "FILE"
        level: DEBUG
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: DEBUG
---
# Source: harbor/templates/notary/notary-cm.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-notary-server
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: notary
data:
  
  
  notary-signer-ca.crt: |
    -----BEGIN CERTIFICATE-----
    MIIC8zCCAdugAwIBAgIBATANBgkqhkiG9w0BAQsFADAbMRkwFwYDVQQDExBoYXJi
    b3Itbm90YXJ5LWNhMB4XDTE5MDUwMzA5MDgwMVoXDTIwMDUwMjA5MDgwMVowGzEZ
    MBcGA1UEAxMQaGFyYm9yLW5vdGFyeS1jYTCCASIwDQYJKoZIhvcNAQEBBQADggEP
    ADCCAQoCggEBAK4kATBrThiYHiCm3bo14cyiSedjmbfx5RVqMKhxj7Lkded60WVi
    vflcZ7nfimxaNOIizStpKmViiitqsAPgbZKwm7qEKpg7rijh29VCwkBupn7jmqjr
    HHcfLwELAF+gLaHJpwiGQLVufb/Z8oVbz2uTfHgKR6giLxD2FKdV60w7aO6QUMw+
    xgcJgVH82/R85Fup5iaEBxmc+TGEeySFhMcQrAugIN4mHkzX38S1LStRS/ebNlqK
    cr2GfRV4D494q2m3r5sQLmNvtF5QIA8sHfluE58/JIkQz2/08+iH2zvLMW+ChwdK
    siDxkORjFr8I3cTLuNSKiLMsFUsEQjwk5L0CAwEAAaNCMEAwDgYDVR0PAQH/BAQD
    AgKkMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTAD
    AQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBH96oDYEc2ubzMYLSagzwA0BxAJZYpdsve
    5E49gXpDmru6XHYP5xkkpKYCWBLzhiG9ixoa/jrSEpadCPjy3Ho+TSmkD+Dbzxqj
    qWVGE8Mzz0d8KRvayrBw0vVG0Bw7mRlGigPYLsN1e/pfh3dPKD0LEbzORy4ndyw9
    5lX5KUzqczr83TED7Q8RFUFNbP9csN4PpOKoFavBaD9oOYkbzlcf/SmsiSVGwcO6
    aeY3bEXBfRlbv7WyDODkh/nLroIcwgKlz9vHCvY0ABxQJs0B9dEuJ4CIMOOeW3ma
    kRdIE7UPhLM0M8Ce5b0BFKbKEtC2adds6CTr5wU49PXYNtIex+es
    -----END CERTIFICATE-----
    
  notary-signer.crt: |
    -----BEGIN CERTIFICATE-----
    MIIC+zCCAeOgAwIBAgIBATANBgkqhkiG9w0BAQsFADAbMRkwFwYDVQQDExBoYXJi
    b3Itbm90YXJ5LWNhMB4XDTE5MDUwMzA5MDgwMVoXDTIwMDUwMjA5MDgwMVowJjEk
    MCIGA1UEAxMbaGFyYm9yLWhhcmJvci1ub3Rhcnktc2lnbmVyMIIBIjANBgkqhkiG
    9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvX+/HrjpBj6YZMYVZOlGwn2h1c0zyanfH+3s
    terYPsNvKUdLetiSBFlohdONcfiw2gjoOWvUjHTSIgXM8MJDLex4y60wNeY9TrQZ
    EZwyD3Nz87fIl1maz6YVbX0eymiQbGCZHktv4iFPB3wwTojDdZSIyVmcTjO30eDc
    RblOApRPcLiWWFFymIm7WMVhFBAzBdAMZwmCcBhnmxobVNd90PCZG58247L78wm2
    cGFJS25u1T+5wMGm5rcC36zOPjtAyKyW3ke7rVAqo8ytpaPL7XM6t03DJUT8s+50
    uODCUf869ofS3A9BGyR3TtRr6OY7A7VrFJk0MzPcMOhSMqWjHwIDAQABoz8wPTAO
    BgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwG
    A1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggEBAEulR4uQ1KgsyIzw+IENhLda
    XQHdA9dBo3QTiu7LJRaJjLv+NCXkCmMiX++3MvI3wjb4VgmrQNFAyxNDILTOTVei
    IDAgYw0rXKqxGklr6tjmUYzkFg2wA5wFATqzJiBH4n7tU2rreWBUEGbrM2DhLhfE
    PWGRYnYzJlxqsb1AEbgYSrwCPG63oW/1rlup9eAwj6ZPr4YqozgU1FGmJ4BiK5ZL
    nag+J7oi6qFlyRGNf4g5Qlcj2agT9K1aS+HzpYeMLki0CvayneU9ZdZRRuWMs+sX
    yfRb6506e28s5PfrbE215evci6gDoXaPBQPNhVRNv3OeDf+3vwZkCX+hAnxyMAc=
    -----END CERTIFICATE-----
    
  notary-signer.key: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEogIBAAKCAQEAvX+/HrjpBj6YZMYVZOlGwn2h1c0zyanfH+3sterYPsNvKUdL
    etiSBFlohdONcfiw2gjoOWvUjHTSIgXM8MJDLex4y60wNeY9TrQZEZwyD3Nz87fI
    l1maz6YVbX0eymiQbGCZHktv4iFPB3wwTojDdZSIyVmcTjO30eDcRblOApRPcLiW
    WFFymIm7WMVhFBAzBdAMZwmCcBhnmxobVNd90PCZG58247L78wm2cGFJS25u1T+5
    wMGm5rcC36zOPjtAyKyW3ke7rVAqo8ytpaPL7XM6t03DJUT8s+50uODCUf869ofS
    3A9BGyR3TtRr6OY7A7VrFJk0MzPcMOhSMqWjHwIDAQABAoIBACS99y2axrvKOTwY
    2B8Xx/t/5ngQ8ICiajvDowjmvwT0WcJUK4NnKHClcUm5agx2Hrw3y+cOTEjrga7N
    Fx57XBE0b3t2WgmpWau/6bhrY51xUkMoGEGYQxcN6cuv3d97BL2uwSGJmOjscmlO
    IAOqKtPKd/cqY88Z4gNUqQDv2/tNtnZ068QinhVr/20ZIhiVnhE/9Jip3uLM/vXW
    MuwNdwSr1cp0f44H8b8qWoE+9K68AC7KAYQ24H0vtuFyAMPtwaXqsV2UR9XKlYlb
    N7RM7zF88NOanbBqosxBVMXRIEX1taRAYZTGYxDr81egDDyqhPvIEs/gDwhCxUPi
    DHCfwGECgYEAxo+wLU/MD+ZTeKhAqAou9EE/Hi2WniPqxTb/CgT3+66m4he+A9Hx
    t5nI6On1i1EBiWkQk/SkNZmZ/hWA/fv2YT97g1EqQxa4nY6I5sPMHM2bsiW3TOeN
    UELuo8li+DjeftAs+w//NUv9rm6l9kYfwCsbEO8ZvsCDiYcuX+U6/XECgYEA9FD1
    WOpA4ilV+VWqy6jXLdPRBO/ijVUQsFXwiyHPh+SfctV/NRLFuUvQQG2NC6YUMX/i
    Lq1slWHR2eo/HAff09ZiwGv7QRA6NNKvmVxwxDWJcJVi8RKoepn5cwe/6HT+5aby
    3vIo/ZRiWijm7CmpA0Vz4XiA6UNZR6uIgDMuoY8CgYAfoXQnQ7b2MXLKncLvAfBI
    6LvtSsXbm00i7YfjSLdYWJItIisa4K7o2I6wy9RZxSXBhgMmDqq5/yYQ28wYqbKt
    +zbpzFw3I791GeelGzvAuuA6mNeCYMCaMI9jeAlUEXsgKHmB5SJ6kwhuaSH3AWS9
    cCB3qh8ny/MoTWiNzi5/gQKBgFZfPK2nezK5TFSubYg8c34XESD+sYgnl5PPfg+h
    711qfNg7FBKuRUqBu+jbEe8ZUrBBNrQryWRyRZ8ViiQdwIqCkzzVr+jLlNhR15SP
    MqqbBrDPj0AMyZU2VBLPnY/PtMF5qQkacVVcnPyk0yaQf9jRN+txD5nnnmuQ/9va
    vFSPAoGAZRuII1e90J4g3UE3+ePfxSDlsNogG9HKWXzkIgOSFJkHp5xLrNxbLmhN
    ImNUaYYXE+AGhUtYqirjMV67YMYaj0Vu77ncumd5A8aIvlgrLGC8OjSsbHihNmJa
    X4HdZadWfRMQ1WexRRk5j6tDSrbX5t1iIxdejNjr4c2fhfKBUAE=
    -----END RSA PRIVATE KEY-----
    
  server-config.postgres.json: |
    {
      "server": {
        "http_addr": ":4443"
      },
      "trust_service": {
        "type": "remote",
        "hostname": "harbor-harbor-notary-signer",
        "port": "7899",
        "tls_ca_file": "./notary-signer-ca.crt",
        "key_algorithm": "ecdsa"
      },
      "logging": {
        "level": "debug"
      },
      "storage": {
        "backend": "postgres",
        "db_url": "postgres://postgres:changeit@harbor-harbor-database:5432/notaryserver?sslmode=disable"
      },
      "auth": {
          "type": "token",
          "options": {
              "realm": "https://localhost:30003/service/token",
              "service": "harbor-notary",
              "issuer": "harbor-token-issuer",
              "rootcertbundle": "/root.crt"
          }
      }
    }
  signer-config.postgres.json: |
    {
      "server": {
        "grpc_addr": ":7899",
        "tls_cert_file": "./notary-signer.crt",
        "tls_key_file": "./notary-signer.key"
      },
      "logging": {
        "level": "debug"
      },
      "storage": {
        "backend": "postgres",
        "db_url": "postgres://postgres:changeit@harbor-harbor-database:5432/notarysigner?sslmode=disable",
        "default_alias": "defaultalias"
      }
    }


---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: debug
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: "harbor-harbor-redis:6379"
      db: 2
    http:
      addr: :5000
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      token:
        issuer: harbor-token-issuer
        realm: "https://localhost:30003/service/token"
        rootcertbundle: /etc/registry/root.crt
        service: harbor-registry
    validation:
      disabled: true
    notifications:
      endpoints:
        - name: harbor
          disabled: false
          url: http://harbor-harbor-core/service/notifications
          timeout: 3000ms
          threshold: 5
          backoff: 1s
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: debug

---
# Source: harbor/templates/chartmuseum/chartmuseum-pvc.yaml

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-harbor-chartmuseum
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: harbor/templates/registry/registry-pvc.yaml

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: registry
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/chartmuseum/chartmuseum-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-chartmuseum"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 9999
  selector:
    release: harbor
    app: "harbor"
    component: chartmuseum
---
# Source: harbor/templates/clair/clair-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-clair"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: clair
      port: 6060
    - name: health
      port: 6061
  selector:
    release: harbor
    app: "harbor"
    component: clair


---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: core

---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-database"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: harbor
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: jobservice

---
# Source: harbor/templates/notary/notary-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-notary-server
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 4443
  selector:
    release: harbor
    app: "harbor"
    component: notary-server

---
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-notary-signer
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 7899
  selector:
    release: harbor
    app: "harbor"
    component: notary-signer

---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-portal"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    release: harbor
    app: "harbor"
    component: portal

---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-redis
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: harbor
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: registry
      port: 5000
    - name: controller
      port: 8080
  selector:
    release: harbor
    app: "harbor"
    component: registry
---
# Source: harbor/templates/chartmuseum/chartmuseum-dpl.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-chartmuseum"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: chartmuseum
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: chartmuseum
      annotations:
        checksum/configmap: d634f6d7b1a65f8d76131cbda6ea3bf92f47bff35de37c2af7a221c6025bd81a
        checksum/secret: 4e65b2fa8b4ab04c4627cf1b1132453622716fd8e5bcb808adc8a2eadaabfd1a
        checksum/secret-core: 5b49058b14f437c937f7b0403081a5e4966e325be6c41a46f7e8401d3edd77b7
    spec:
      containers:
      - name: chartmuseum
        image: goharbor/chartmuseum-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 9999
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 9999
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "harbor-harbor-chartmuseum"
        - secretRef:
            name: "harbor-harbor-chartmuseum"
        env:
          - name: BASIC_AUTH_PASS
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
        ports:
        - containerPort: 9999
        volumeMounts:
        - name: chartmuseum-data
          mountPath: /chart_storage
          subPath: 
      volumes:
      - name: chartmuseum-data
        persistentVolumeClaim:
          claimName: harbor-harbor-chartmuseum

---
# Source: harbor/templates/clair/clair-dpl.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-clair
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: clair
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: clair
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: clair
      annotations:
        checksum/configmap: 6276aba6568a256b0ae8faf4722952f4528fb91d5a5287ff165c07d3caf8297c
    spec:
      containers:
      - name: clair
        image: goharbor/clair-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 30
          periodSeconds: 10
        args: ["-log-level", "debug"]
        env:
        - name: NO_PROXY
          value: "harbor-harbor-registry,harbor-harbor-core"
        ports:
        - containerPort: 6060
        volumeMounts:
        - name: clair-config
          mountPath: /etc/clair/config.yaml
          subPath: config.yaml
      volumes:
      - name: clair-config
        configMap:
          name: "harbor-harbor-clair"
          items:
            - key: config.yaml
              path: config.yaml


---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: b2634326ebaf81a9d16d8f8471be6db14f32364ab16a93253bca88fcbf8a5ccb
        checksum/secret: 54edc074b6a361455fc20d13506e84a4b660775318a8b89a595f7bf4542e15df
        checksum/secret-jobservice: c05ff01ad0b4f489089b01497e0944dc1158a911397fd50fea4c5c8087bddb9e
    spec:
      containers:
      - name: core
        image: goharbor/harbor-core:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "harbor-harbor-core"
        - secretRef:
            name: "harbor-harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-jobservice"
                key: secret
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca/ca.crt
          subPath: ca.crt
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: harbor-harbor-core
      - name: secret-key
        secret:
          secretName: harbor-harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: harbor-harbor-core
      - name: ca-download
        secret:
          secretName: "harbor-harbor-certificate"
          items:
            - key: ca.crt
              path: ca.crt
      - name: psc
        emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: 284bfc91e390437cc5029ed1494432212b26ddb8b6f28e369429a55f92f349e8
        checksum/secret: b9894cd096569c69b8cf3691e207df15f3a81d2f32d7a7c805bf8fd714909191
        checksum/secret-core: 5bc82153d7e0b26bdf3a1337b50e14bd5532671346f7bd824022d78b68632b71
    spec:
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-jobservice"
                key: secret
          - name: CORE_URL
            value: "http://harbor-harbor-core"
          - name: REGISTRY_CONTROLLER_URL
            value: "http://harbor-harbor-registry:8080"
          - name: LOG_LEVEL
            value: debug
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: 
      volumes:
      - name: jobservice-config
        configMap:
          name: "harbor-harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: harbor-harbor-jobservice

---
# Source: harbor/templates/notary/notary-server.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-notary-server
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: notary-server
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: notary-server
      annotations:
        checksum/configmap: e28ff9f0b1c31c907e1384d70082589d7912c8d82a63e1796a26dfdd25a8c9c4
        checksum/secret-core: 4662e28d76d422e7acb19fbbbebf92d71a5e6196624e8ec01ab118960ecb4119
    spec:
      containers:
      - name: notary-server
        image: goharbor/notary-server-photon:dev
        imagePullPolicy: IfNotPresent
        env:
        - name: MIGRATIONS_PATH
          value: migrations/server/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-harbor-database:5432/notaryserver?sslmode=disable
        volumeMounts:
        - name: notary-config
          mountPath: /etc/notary
        - name: root-certificate
          mountPath: /root.crt
          subPath: tls.crt
      volumes:
      - name: notary-config
        configMap:
          name: "harbor-harbor-notary-server"
      - name: root-certificate
        secret:
          secretName: harbor-harbor-core


---
# Source: harbor/templates/notary/notary-signer.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-notary-signer
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: notary-signer
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: notary-signer
      annotations:
        checksum/configmap: 87c0a37a11dbe3b84648827fc059efb818653ce012290d94becb50304f18f3e1
    spec:
      containers:
      - name: notary-signer
        image: goharbor/notary-signer-photon:dev
        imagePullPolicy: IfNotPresent
        env:
        - name: MIGRATIONS_PATH
          value: migrations/signer/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-harbor-database:5432/notarysigner?sslmode=disable
        - name: NOTARY_SIGNER_DEFAULTALIAS
          value: defaultalias
        volumeMounts:
        - name: notary-config
          mountPath: /etc/notary
      volumes:
      - name: notary-config
        configMap:
          name: "harbor-harbor-notary-server"


---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-portal"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: portal
      annotations:
    spec:
      containers:
      - name: portal
        image: goharbor/harbor-portal:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 80

---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: 60b5406777628ab531192bd79d062bd8880d83772644089ed5349cd65d8aa24c
        checksum/secret: 0aa00e79fc4c8f29c9823b30c6df3c6a977b1f367f97ab9ae1f30fe7ee7777cc
        checksum/secret-jobservice: 748f029531d2d9f14da6577893af05abab92ca0b187f3c2b25951d7c89834ca7
        checksum/secret-core: fdb19047b54110858b274b51c6206bb56ea8ff5037b4575bf68307208fcd79e8
    spec:
      containers:
      - name: registry
        image: goharbor/registry-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-harbor-registry"
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-root-certificate
          mountPath: /etc/registry/root.crt
          subPath: tls.crt
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-harbor-registry"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-jobservice
                key: secret
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-root-certificate
        secret:
          secretName: harbor-harbor-core
      - name: registry-config
        configMap:
          name: "harbor-harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: harbor-harbor-registry

---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "harbor-harbor-database"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "harbor-harbor-database"
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: 8accf53dfbf601db7e1b0fb79823d057c19b43014181ecc32c20f049f948b187
    spec:
      initContainers:
      - name: "remove-lost-found"
        image: goharbor/harbor-db:dev
        imagePullPolicy: IfNotPresent
        command: ["rm", "-Rf", "/var/lib/postgresql/data/lost+found"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
      containers:
      - name: database
        image: goharbor/harbor-db:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 60
          periodSeconds: 10
        envFrom:
          - secretRef:
              name: "harbor-harbor-database"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-harbor-redis
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: harbor-harbor-redis
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      containers:
      - name: redis
        image: goharbor/redis-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/ingress/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: "harbor-harbor-ingress-core"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    
spec:
  tls:
  - secretName: harbor-harbor-certificate
    hosts:
    - harbor.local
  rules:
  - http:
      paths:
      - path: /
        backend:
          serviceName: harbor-harbor-portal
          servicePort: 80
      - path: /api/
        backend:
          serviceName: harbor-harbor-core
          servicePort: 80
      - path: /service/
        backend:
          serviceName: harbor-harbor-core
          servicePort: 80
      - path: /v2/
        backend:
          serviceName: harbor-harbor-core
          servicePort: 80
      - path: /chartrepo/
        backend:
          serviceName: harbor-harbor-core
          servicePort: 80
      - path: /c/
        backend:
          serviceName: harbor-harbor-core
          servicePort: 80
    host: harbor.local
---
# Source: harbor/templates/ingress/notary-ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: "harbor-harbor-ingress-notary"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
  - secretName: harbor-harbor-certificate
    hosts: 
    - harbor.local
  rules:
  - http:
      paths:
      - path: /notary/
        backend:
          serviceName: harbor-harbor-notary-server
          servicePort: 4443
    host: harbor.local 
---
# Source: harbor/templates/nginx/configmap-http.yaml

    
---
# Source: harbor/templates/nginx/configmap-https.yaml

---
# Source: harbor/templates/nginx/deployment.yaml

---
# Source: harbor/templates/nginx/service.yaml

