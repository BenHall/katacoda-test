---
# Source: harbor/templates/adminserver/adminserver-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-adminserver"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: adminserver
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  HARBOR_ADMIN_PASSWORD: "a3ViZWNvbjEyMzQ="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="

  CLAIR_DB_PASSWORD: "Y2hhbmdlaXQ="


---
# Source: harbor/templates/core/core-secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "TU8wbW9lV29wajdYeVdMRw=="
  tokenServiceRootCertBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMzRENDQWNTZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFSTVE4d0RRWURWUVFERXdab1lYSmkKYjNJd0hoY05NVGt3TkRJNU1UUXlPRFF5V2hjTk1qQXdOREk0TVRReU9EUXlXakFSTVE4d0RRWURWUVFERXdabwpZWEppYjNJd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURLajZUNllxZWdkY0QrClM4YjNud0txN3N1SHBSNHNRM0YxcTVDSG0zVkh3akJyNUx6TkhhTUM0QW9IbnArakNEOW4wM1JqU1lZNWo2cmwKM1B2c2wvamR0R3d6ak9IRitXRzZMVFc2a29CWmExdDFHRmFtL2MxVkk2aVltUzQ0T3BSYW41b3VwVWViTXp5TgpaeWl5WHYyUHpxVEVQajFYdEx2QjUvS0cxUENnR1ZzSEFTTDFSME1Vem9PM2V2M3VSd1ZIWjlRRjJiL1RYa2FrCjlXYWNLODN2OUVaeC9vNFZYSk5TenBtalR1SFl3eU50MEtXL05GTW5KQnh4QlRxTHBONHJoMW9Nc0pHaGZxT0wKcDc1WGJxa3pxeUFmZGQ2UE93Y0hQTUJ4N1ByQ0FLdk9QOVREeTkvanlCVXJ3bkc3VXJlRHI4RkxrNDRFL1orSQpDSHVZRVY4NUFnTUJBQUdqUHpBOU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGCkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUEKdEpuRWxhTCtCTFB4VlZ5YzZ4eU5NTGJqK3FqTzMyWERrL0ZobGt6MVNsQXFmSkxET3NzSDZBRUU5TDUzZEpiZApha2ZyYUoxZ2hjVE5vTGJUMnRLc29YNHFHbUtOdU5WQi9lNHJ4SGJqQzZVazZ5TDN2M3JRL1M2VDVPdWVyU09oCmc3TjVPRVBtTENyem9ZaXRqM0hBMjk4ajl0WEh6cW1JRndkNjJTRWpwMWM4ZVBzOVhHMW9aY29kd0RZZlE4aC8KTExiai95dFptNHdqb3pMNTZTUFJ3SGcweCt5OEpraGRaNEVsRjVHM0lzbUlnTUU0M1RuMXJMemxrMldXMmQwdwpvV2dJdkxKS09VVjZOVHNMRWhEcjZscytpTTQ5bHM0TEt1cUV4R2F1TTNyclcrK3lzNndkaG1tZ25kVmtPamJvCnlIRXQ0a2dYU01IZExIU01vOE5zTHc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tokenServicePrivateKey: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBeW8rayttS25vSFhBL2t2Rzk1OENxdTdMaDZVZUxFTnhkYXVRaDV0MVI4SXdhK1M4CnpSMmpBdUFLQjU2Zm93Zy9aOU4wWTBtR09ZK3E1ZHo3N0pmNDNiUnNNNHpoeGZsaHVpMDF1cEtBV1d0YmRSaFcKcHYzTlZTT29tSmt1T0RxVVdwK2FMcVZIbXpNOGpXY29zbDc5ajg2a3hENDlWN1M3d2VmeWh0VHdvQmxiQndFaQo5VWRERk02RHQzcjk3a2NGUjJmVUJkbS8wMTVHcFBWbW5Ddk43L1JHY2Y2T0ZWeVRVczZabzA3aDJNTWpiZENsCnZ6UlRKeVFjY1FVNmk2VGVLNGRhRExDUm9YNmppNmUrVjI2cE02c2dIM1hlanpzSEJ6ekFjZXo2d2dDcnpqL1UKdzh2ZjQ4Z1ZLOEp4dTFLM2c2L0JTNU9PQlAyZmlBaDdtQkZmT1FJREFRQUJBb0lCQUc3bzhBQlkvRWVUc2pTSwo4VXFzT2gyMTJxTk8rWkpxNnpqdTA1Z3N1cTZyMlM5NmN4WXNZQkUyOHNieFI1OVE2TWJFdFRtWURIS0FBNmNRCnRLLzdGanp1aVVCQXAyNXErZU9pMVlSdXF2QkxKQ3lkUXZUMGl2VlBMUVZBK2xtM1dYdTFZQXFpWE83Und4bjUKbmdMc21CR2hwLzM3eGtLN3B3S3BLZFpCeWU4ZWVJV2pLNllIaW9RaGh2Q29ZY2YrcWZkbWs5VTlvN01FM0d5egp6SVFidW0xSzd5Tys1R1NEUk5yMFFYekwxVHgzSGhMa2VhbmlrUzNnTWtmK2djQkloRmhGSitaVnF1ckFwU2Q0ClVkRVJQV1N6TTBiRTNyYytpUHhOeEFicDdpa29GOG02MTcwbm41czU4N1dEeldDSStzbHRtN3RYaFBmaHZ3cEsKankwZnZBRUNnWUVBK21ZRThNN1lTTE8wMnhJNnJwcjlXeVN5UXlsbVllRnAxSklBcGU5K3FGZGJMOC9aR1haVQpMbllQUCs4ME1taVFPZmNLSDlwMkdpLzFqLzFPZXYwU0x6clIxSjVMU01idjdEQktPNzJpVmtiZjBQNnI2bmlYCldiWDk4RGNDZHYxeVlJQ3Q4WWdOKzlmTVFQb2ViNDI4NjFSRDZsLzdtbVFUU1dkY2h2R09LT0VDZ1lFQXp4ZXIKa2tmYS9BSWFMZFo3T0ZuUnhPcWhuOWdTOXQzeVpSdDhvbDZaV21HUjg0TzJSdHBrRWxrRCtpOUpVK3VBaXBnNwpBUzYxTHVPWWxybEhyQk5BUkFtTnRqUWM5dVRyV0pZeVllcXRVTnRFd3BuUGlUZ0VuUTlWejdZdDZQYmd3ZkcvCjRMamczdm04NHB2TXJrZFdNZDhza09ucVRqVVY1QUtqMTBLZFNWa0NnWUFtZ2xBYU5NV0FrTnFzb21ZUitsWWkKa1VjMUd3WGE0YzdqMlR4dVNLSGpBK1JMT3h6NVZJQm4wTkpSazlra00zNlMyNUpjQ2I0R0V3QWlEK1BrK0V5MgpwTVltZTkyNktKWTNiY25NM0VJK0lKSkZVeFZmYndKZjBxUm1NQitaNnlxTyt0dEZmUlloZURPNmZuejF6UWVUCjdaYXdVZWlnK3VrWWJlUUdBTnBMSVFLQmdFY0UvQTdIVzU3dTdhRm9tNHRBcWtLWW9HTGJ5KzBqUWp4UVI5YTcKRUdaQmJiY1FKVk41RTdhREZtMFhDRk9pUU12RzF2MVowa0xKUkl2ejhGTmZxcnRxZDFIVDMxY0FQSUY5eUx0eApxb3cvRmY2U2x1eWM3R0FjWVRaQmFNOHEwdnRQOTVpT2JuZXBONUNURTRkMDZXZGkvTHFacllPeWl0Wk4zWGcxCjNSREpBb0dBY1hGankwTk8wdE9jamtwQjhLTVZHbVVFRWJ5TGpzdkIwSHpLUVJXNld5VnhZWGdnc3NNdzNnMUkKdlFsM0QzcFJQeldOdWcxaW1vUWFaRzVxWm9XMThDeFhsZTdhU2FXV1hPUGU2ODY2aHJZcXZPSnJaS1RQU05uMQpuVGRRSllXZkladmo2bERnTVZSSk43cm0xZHVBT2J2aXcxSVROQVJSWWFnVGwzTUp1eTA9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-database"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secret: "Q2FmNDZIeFVBQ25uTkhDcA=="
---
# Source: harbor/templates/nginx/secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: harbor-harbor-nginx
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM4ekNDQWR1Z0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFVTVJJd0VBWURWUVFERXdsb1lYSmkKYjNJdFkyRXdIaGNOTVRrd05ESTVNVFF5T0RReVdoY05NakF3TkRJNE1UUXlPRFF5V2pBVU1SSXdFQVlEVlFRRApFd2t4TWpjdU1DNHdMakV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQzZTRDlYCldjYVQ0TWREb2RVS0xXZFBKSWYwVkpVZ1plQ0U1aUhBdXp2TkNiQnd1QlBIWHEwZzRaTFZKbnJySWhGUDNDREcKeHpYYWNSQXA2cXRoOTlrdFJQZmhTZHdmZHFaaWFpeW1laGllZ0VSUUZJd3NqWmhVd0ZzaGltNkVkVGNyRGM4VwpIVmpuY1BKOXFxaDYwWUZrbXE4b2pqd0pnMGY3UU56SEh5SG1CNy9nemEzaVBjSnRZcWRGOVJCelhHdWMzYUlkCnFtWWUxWU9HWENQcmx1SFNUdlh6d21ONEora2dNVXhMV0hxdXNCRGVjYk9uWU9WeDRRQ3BVSFg0bm52bzFqTVoKWEhmTE5nTEtzOWRvSFlFRW0rMEhwcVFvYis3WGhOc1M3SnRyRm1JMVJyQXdPN3JzSHBQalBoNWdYQUdEa0xrQgpnMUo3eFZJYm4vdmVXMURQQWdNQkFBR2pVREJPTUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVCkJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBUEJnTlZIUkVFQ0RBR2h3Ui8KQUFBQk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRRER5VWhid1pDVWVkQnFtRm5HeWsyNnRtZE1FdkZCVDA5eQpPRlNrUW1FSStXRFhoUllOcDlOanlPUFV5SHRhYUNBcUpwbGQyeVVFZ3VWcnpWZ3RpL1RraWFPQXM2VHNNQ3VqCnFZRk9ockVkblU4MmdMMmkrSXBsaGRpM1lFSjZqa24zL0p5M05VVlFvTkhnOUhSYnEvZi9YNm9Yb0dPQ1dhVisKQ0w3VTlVMmR1SUc4MFhqV2pRbitWbm85dG5KQkxvTWtlbnhmMVRxaVZnbTV4TzJhamYvVXhCOGgvYUtPS0t0NwpSWXZVbEtyc3JiTjV4ekhXTlo5N0R3bVJ6ME1qTFYzYjNCNlg3TytGZWI5RnpSNHRhUEEwODZtUnBwZHVoQ3ppCjhrU1UyQWRhckF6aEdJaXVaR3ZXT1BML2xjbjdka3RwenF3cU4zanFUMGdqSnUwY3pnU2gKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdWtnL1YxbkdrK0RIUTZIVkNpMW5UeVNIOUZTVklHWGdoT1lod0xzN3pRbXdjTGdUCngxNnRJT0dTMVNaNjZ5SVJUOXdneHNjMTJuRVFLZXFyWWZmWkxVVDM0VW5jSDNhbVltb3Nwbm9Zbm9CRVVCU00KTEkyWVZNQmJJWXB1aEhVM0t3M1BGaDFZNTNEeWZhcW9ldEdCWkpxdktJNDhDWU5IKzBEY3h4OGg1Z2UvNE0ydAo0ajNDYldLblJmVVFjMXhybk4yaUhhcG1IdFdEaGx3ajY1YmgwazcxODhKamVDZnBJREZNUzFoNnJyQVEzbkd6CnAyRGxjZUVBcVZCMStKNTc2Tll6R1Z4M3l6WUN5clBYYUIyQkJKdnRCNmFrS0cvdTE0VGJFdXliYXhaaU5VYXcKTUR1NjdCNlQ0ejRlWUZ3Qmc1QzVBWU5TZThWU0c1LzczbHRRendJREFRQUJBb0lCQVFDSzFNdDRRMjFPeXNoWApiR1lGRnIrVzZVZjEzWS9pdkdxdlFZQklUb0tNRmp1TVZuUlBNdzFlb3g4MmdsNDduWUUvZm5SakVSYmV2VUxwCnFuNmVIZ1NheTNyZVNaaW5UbHRFbjVLMVkrdXpQUzhzYTVQb3BJS3lMMFg3NGxycGx4NU5sUllRaWtDM0JLT0UKNnNwejltNHoxMkRSbmVlNnd6L0RUcHo4UGdTYWxVYWJNd25iNWsvQXRNM1ZIdVZBYVRQOGpjOW5VSlR6OVptYwpZSkZaRjJqaE9XRVduY0MxWGZwY1lBS2d5T1pQdVI5UU9YMC9zMUh4QThsYlF4THNBWEVXMkJONHJxNTdQWVZPCmF3MlF0RUtTMnBzUlBoRmhFdEFCd3lYYjYyZHNqWWFuTU83NkE5SlB5SW5mdzJWQncvbWE3d2libFptYU44L0kKcjEwRkNwd0pBb0dCQU1RKzNWODBESG5zQTUxcWlFTjBhRXViRHoweSsvM0pGWkNMdU1nSWV0MTNjT0VFUTFWVQpiN3RZd1Z3bG80MkRUTFJzaTdRVVBQaUxnTTVlTHVlZXZxd1FkMFpUejVEaVdKZHFCR0xvWThVVEVlZUUvNGtpCjE2a1RYNm9DSUVFcVEyd0QzZnNHRmlVdHZpZFJBZjhWVjAxdm1EK3VRdi9qcVNXSXd5TlpSNDc5QW9HQkFQTUEKd0FqcC9xSWU1OVB6Yjg2cjZJalMwYlpRTGNaSzZHNEl0Y1NNQUNZMTEzczZ6SFR4QWFXMnB4anFRZUU0cVhxVApRcDZzUlBFdUpyMVVLTmlCRzgyWnRkeERUYis0a1FVR3RpeXJIU0RlZXh4STF6ZWZiNXJnV21IWE5LV2s0V1BPCk1aV1BXaEJ2QmovblIwdnFucFhuaUJwc1hIVDAvUms1dW9oYmhyYTdBb0dBUHduaW1uNWhzNWg0NE13ajBXZEgKU1dJWjF4TFZsNFJNaFE0YzRVUzRFd1FYSW5ENElDVHJiMGJuZGU0eFIzZngzOU11WFQ1VEI1UG9ZR0lvdHdacgpRV0pZcmlLbC9taDNCTXh0ZEVncUpGZ24zRE1BMHRCNmJqbG05WG1SV3QxMG92SHJFSU80QVdGY1A4enAwMExMCnRIZ3djK1JLYVdCOEtTNXhZSjJCT3hFQ2dZRUFtMEdQY0NLUW5lUkJHaG9mQlZ5d1pUck00ajY0QUVrNzE1R1oKRU1xaURjZTR0UE1NVG1ydE1vTlFuNHFNTE9tVzNzblhkcWw2SXQzcHdtMVM2NEVSMG5xeXh0ZjVoTlRYVXU3RwoxaU05cVJKOGRjWFVPNldTR05IZTdVUWlUdkxaVG5zZkV2OVQrOHZ6b2tDU1BON2FFOHlxR0xmREdyYXNQc0d6CmZBdCtOcUVDZ1lBd21zam1jdnVmYmN5WC9JUm5ycDhtRFhHUFN5SUJueXZEQ3ovTzF4eCtlRXpkNDNsYWUzWEoKOUw0SkRoRmVSdGZJcDQxT2sxMmtxcDVwQ2F1YmdHdDkyVElqZDFJRng5UXlRdWl5SFZ4VGxMSHNLdFJNTWR3bQpKc3J0V0pqdG9rbXBlSENZdWl6NnpFazErRzRWY3pySXRubWc5RW5FS1l1Qk95S2xLSWFsdWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1VENDQWMyZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFVTVJJd0VBWURWUVFERXdsb1lYSmkKYjNJdFkyRXdIaGNOTVRrd05ESTVNVFF5T0RReVdoY05NakF3TkRJNE1UUXlPRFF5V2pBVU1SSXdFQVlEVlFRRApFd2xvWVhKaWIzSXRZMkV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRHdQb3VCCkZFT1dwanlIRU5ocEFKTUV2Z2hZQWdvcnBSWDdrQXlkdXAxQmhLVHF2MHFkb2FkRlRyRHRTbGpUTWQ1WUM4NWoKSDRxNGNBTktEZGlYNnFBSkx6NlU0V2E2WDhKb3BYOHdJb2Z1dnlla3lkQWxaUjV4bE0vMUFzYkxtRkxpSGltTQpyL1lreXE0dStlanZCNmVwYXpBZTViOFlFZERKTHBDTVJQR2xSdWo0bWxxRlo1SVkzR05md1R1SDZDWmk0QlpvCkg2L3pPY2dYL2FwVFVVeEpsa1dNN2tKaTk0TWJab0tQbHMrT2lZWVlQVGU0NWI2VlZWNURvaml1QnNhV1Jsb3UKN2hmU3UwRHZLTUxRT3VQbHo4cWdyV3EvY1BHVjN6ZnR6YWFTVHBVUmdhVUlHVVVWRDhzdTRtcjFrdmVCdXRVbAptSnJXdG5BbFVpSVJHVVpKQWdNQkFBR2pRakJBTUE0R0ExVWREd0VCL3dRRUF3SUNwREFkQmdOVkhTVUVGakFVCkJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU5CZ2txaGtpRzl3MEIKQVFzRkFBT0NBUUVBZ2EwcVZLZjNvVmxSOGIvMDVTdVVOWXYwVGwzSzFSTlFNYlh0bmtVL1pRd2V2WE5oQ2ZYUAoxd0w3cFpqWlY5ZnlnTmZLMkpkM1k3SldPNGNPSmUwb3F1czJBUjJHbFNsWURrSG40bWY2cVltTHRMZnVhYVFWCnd1cklCMGJxeS9TRjNyUFVRajBqeUtUK0VTaGh4RXZnUXpETWE5eFhocDVveVBlak5PZG9QUmNLWm9oME0rK3QKZVZTMzlOMXZoTTNBbHNOVUZjYTlaeHdTcE5mdExSQlNHWDFKVk5hZmh4UytRamZPY2dxbE11Y0ZZSVI1Y0RDZQpUbU9LaDhtbWhCQ05mTXMzajhhNFVqaXRTd1JNZHM2NzZPZkFONzBZeUFha3V6WGlEUTk3aEZjeGhtTnh5MEpxCnlCa1dOeWZHRVBqbjJGc3Eyc2hhWFdiT2tqSUxTUXRTVkE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "RXlKRjJmRlhLc1RPM0pYcQ=="
---
# Source: harbor/templates/adminserver/adminserver-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-harbor-adminserver"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: adminserver
data:
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "harbor-harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  EXT_ENDPOINT: "https://localhost:30003"
  CORE_URL: "http://harbor-harbor-core"
  JOBSERVICE_URL: "http://harbor-harbor-jobservice"
  REGISTRY_URL: "http://harbor-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://harbor-harbor-core/service/token"
  WITH_NOTARY: "true"
  NOTARY_URL: "http://harbor-harbor-notary-server:4443"
  LOG_LEVEL: "debug"
  IMAGE_STORE_PATH: "/" # This is a temporary hack.
  CFG_EXPIRATION: "5"
  ADMIRAL_URL: "NA"
  RESET: "false"
  WITH_CLAIR: "true"
  CLAIR_DB_HOST: "harbor-harbor-database"
  CLAIR_DB_PORT: "5432"
  CLAIR_DB_USERNAME: "postgres"
  CLAIR_DB: "postgres"
  CLAIR_URL: "http://harbor-harbor-clair:6060"
  CLAIR_DB_SSLMODE: "disable"
  UAA_ENDPOINT: ""
  UAA_CLIENTID: ""
  UAA_CLIENTSECRET: ""
  UAA_VERIFY_CERT: "True"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  WITH_CHARTMUSEUM: "false"
  CHART_REPOSITORY_URL: "http://harbor-harbor-chartmuseum"
  # The following properties have no default value in Harbor core if not 
  # set via env. They should be removed after the refactoring:
  # AUTH_MODE, SELF_REGISTRATION, PROJECT_CREATION_RESTRICTION 
  AUTH_MODE: "db_auth"	
  SELF_REGISTRATION: "on"
  PROJECT_CREATION_RESTRICTION: "everyone"
  TOKEN_EXPIRATION: "30"
  EMAIL_HOST: "smtp.mydomain.com"
  EMAIL_FROM: "admin <sample_admin@mydomain.com>"
  EMAIL_PORT: "25"
---
# Source: harbor/templates/clair/clair-cm.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-clair
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: clair
data:
  config.yaml: |
    clair:
      database:
        type: pgsql
        options:
          source: "postgres://postgres:changeit@harbor-harbor-database:5432/postgres?sslmode=disable"
          # Number of elements kept in the cache
          # Values unlikely to change (e.g. namespaces) are cached in order to save prevent needless roundtrips to the database.
          cachesize: 16384

      api:
        # API server port
        port: 6060
        healthport: 6061

        # Deadline before an API request will respond with a 503
        timeout: 300s
      updater:
        interval: 12h

      notifier:
        attempts: 3
        renotifyinterval: 2h
        http:
          endpoint: "http://harbor-harbor-core/service/notifications/clair"


---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080

---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "harbor-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
    job_loggers:
      - name: "FILE"
        level: DEBUG
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: DEBUG
    admin_server: "http://harbor-harbor-adminserver"

---
# Source: harbor/templates/nginx/configmap-https.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-nginx
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;

    events {
      worker_connections 1024;
      use epoll;
      multi_accept on;
    }

    http {
      tcp_nodelay on;

      # this is necessary for us to be able to disable request buffering in all cases
      proxy_http_version 1.1;

      upstream core {
        server harbor-harbor-core;
      }

      upstream portal {
        server harbor-harbor-portal;
      }
      upstream notary-server {
        server harbor-harbor-notary-server:4443;
      }
      
      log_format timed_combined 'remote_addr - '
        '"$request" $status $body_bytes_sent '
        '"$http_referer" "$http_user_agent" '
        '$request_time $upstream_response_time $pipe';

      access_log /dev/stdout timed_combined;
      server {
        listen 4443 ssl;
        server_tokens off;
        # ssl
        ssl_certificate /etc/nginx/cert/tls.crt;
        ssl_certificate_key /etc/nginx/cert/tls.key;
      
        # recommendations from https://raymii.org/s/tutorials/strong_ssl_security_on_nginx.html
        ssl_protocols tlsv1.1 tlsv1.2;
        ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:ssl:10m;
      
        # disable any limits to avoid http 413 for large image uploads
        client_max_body_size 0;
      
        # required to avoid http 411: see issue #1486 (https://github.com/docker/docker/issues/1486)
        chunked_transfer_encoding on;

        location /v2/ {
          proxy_pass http://notary-server/v2/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_buffering off;
          proxy_request_buffering off;
        }
      }

      server {
        listen 443 ssl;
    #    server_name harbordomain.com;
        server_tokens off;
        # SSL
        ssl_certificate /etc/nginx/cert/tls.crt;
        ssl_certificate_key /etc/nginx/cert/tls.key;
      
        # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
        ssl_protocols TLSv1.1 TLSv1.2;
        ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
      
        # disable any limits to avoid HTTP 413 for large image uploads
        client_max_body_size 0;
      
        # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)
        chunked_transfer_encoding on;

        location / {
          proxy_pass http://portal/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          
          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;

          # Add Secure flag when serving HTTPS
          proxy_cookie_path / "/; secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /api/ {
          proxy_pass http://core/api/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;
          
          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /c/ {
          proxy_pass http://core/c/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;
          
          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /v1/ {
          return 404;
        }

        location /v2/ {
          proxy_pass http://core/v2/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          
          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /service/ {
          proxy_pass http://core/service/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          
          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_buffering off;
          proxy_request_buffering off;
        }
      
      location /service/notifications {
          return 404;
        }
      }
        server {
          listen 80;
          #server_name harbordomain.com;
          return 301 https://$host$request_uri;
      } 
    }
    
---
# Source: harbor/templates/notary/notary-cm.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-notary-server
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: notary
data:
  
  
  notary-signer-ca.crt: |
    -----BEGIN CERTIFICATE-----
    MIIC8zCCAdugAwIBAgIBATANBgkqhkiG9w0BAQsFADAbMRkwFwYDVQQDExBoYXJi
    b3Itbm90YXJ5LWNhMB4XDTE5MDQyOTE0Mjg0MloXDTIwMDQyODE0Mjg0MlowGzEZ
    MBcGA1UEAxMQaGFyYm9yLW5vdGFyeS1jYTCCASIwDQYJKoZIhvcNAQEBBQADggEP
    ADCCAQoCggEBAOAASB2Uv2UTwXfywa4YanYmAl3j/yxqQHRdpJKEwbyU4+qaNXrZ
    6wpjG/ZvvhvQFDjoMQ4syntE+gzNNbXV+tGYIsBtU3dOphtt7cvOLgI09exaZt2H
    HcyHtv1bWneMBV5CHy8VGfvSIxz6S1j2TGkxkYXYDRQbPYFR2F3MO0bS7azOvhGC
    Vc8gfuxa1W/LDlAPDIpfUeCMlW1fmOh9bYMl45pg0I3XanluSOmOJHMpUPr2D70X
    HxC28ge6JQrs7DdvIVQX6d3yQ16Ee1o1qRJ5inWSh6Ol8HV7vuCND91sBBUam9lG
    Zz0xKrCbby8T0r/+S/n+7RUcCWP9MPvE1EkCAwEAAaNCMEAwDgYDVR0PAQH/BAQD
    AgKkMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTAD
    AQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBu29Ys9+zCb9syNVoxZ7pzJfO2J637s5Gh
    N8eXgY3FZxiI5Z/Qure9yZ2VWua8+8NfLSa4PNjIW/3Qtamusys8XSSw+r6WHUou
    P0WJwB0SETuHuS1aXa5f5NlJFnvQjFlPxHY29I/NAzyWNvZAcUswAv/A1/1L9/nj
    FMw6Psm4nzNe5JZfNiRKVmyL8XXalCPpelMoF5lhKVBNr3+3AQT/L2y0KsHOpEIK
    almgMqHuxMJpuFrW9c3UjJefb4lbkr1TBTMbJJCtP17I7qVXcV5HpANCWitYYwDO
    PoGFR50sgVgkfgiVcM/MI4PJ/HnLqdgQBv6u4U5E8Qh05olq9Yb9
    -----END CERTIFICATE-----
    
  notary-signer.crt: |
    -----BEGIN CERTIFICATE-----
    MIIC+zCCAeOgAwIBAgIBATANBgkqhkiG9w0BAQsFADAbMRkwFwYDVQQDExBoYXJi
    b3Itbm90YXJ5LWNhMB4XDTE5MDQyOTE0Mjg0MloXDTIwMDQyODE0Mjg0MlowJjEk
    MCIGA1UEAxMbaGFyYm9yLWhhcmJvci1ub3Rhcnktc2lnbmVyMIIBIjANBgkqhkiG
    9w0BAQEFAAOCAQ8AMIIBCgKCAQEAshu2mjipLHL2zHyvGqPLG6+Xa/3dRZEeM+Ka
    RQn3puuLK+AUUHU3ZqiL/F810YRfo9ieyn97zYAKyfOXrhEkrXlkQ5wzQf08Bxwo
    2lejVVu/WYjHnZSEXsn9PeBhhjvuMvSzUXZcgurnz+pomJN1tJK3u3pIfY1TZ2hY
    0gmgbMYck5laPFpmNFlhljqT4gSs8cwO5KgWCllAvAhrmPdbj4JbLUIMX0hKOR0n
    KX6QxlXBRI3LagZBBZydWOXL2wgznxNWvvZAxNlJeayw6vk1CRAuLGDkfvdllqnl
    7WLibCB77ZKW4jYr9bouLuhCl8LhE5TCzPFRjXjNd8ynZCR/YwIDAQABoz8wPTAO
    BgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwG
    A1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggEBAJBo0YMP4pPFzXM+2leiAakQ
    6D+VTAmTbDbtA1zSr4RTgKM3/EE0d/92BMj3X/iU12Wn9pBdKx6pCLEtvKyMX4TA
    d/hNd12ziW2kR3D7hf1ZXzCnqcHKBmzvYRWVy/Fdlvm4FxN6AmLTwUNcl3pB73pz
    IlcShvPIGGDbg+Z2Vo/G4SeFGf9ePBn/V0Ei9V8i9PvlvNJEiXhNWMBChZW5frwe
    zXGyOWOIERAze15jGD40UwvwDDDI2mudAID7uNxZ8Cbm4QJO+iTBwq/w+jEbHPxV
    2xf4fIdDVzc6bL8evXhzkzdfnxCnK3ghhcFa6SDHfl9jocDGRJSa8G1VU+mF52U=
    -----END CERTIFICATE-----
    
  notary-signer.key: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEpAIBAAKCAQEAshu2mjipLHL2zHyvGqPLG6+Xa/3dRZEeM+KaRQn3puuLK+AU
    UHU3ZqiL/F810YRfo9ieyn97zYAKyfOXrhEkrXlkQ5wzQf08Bxwo2lejVVu/WYjH
    nZSEXsn9PeBhhjvuMvSzUXZcgurnz+pomJN1tJK3u3pIfY1TZ2hY0gmgbMYck5la
    PFpmNFlhljqT4gSs8cwO5KgWCllAvAhrmPdbj4JbLUIMX0hKOR0nKX6QxlXBRI3L
    agZBBZydWOXL2wgznxNWvvZAxNlJeayw6vk1CRAuLGDkfvdllqnl7WLibCB77ZKW
    4jYr9bouLuhCl8LhE5TCzPFRjXjNd8ynZCR/YwIDAQABAoIBAGJ4Me93zgg2Ez6g
    3IqE7gEDhlr9Qr14atNSv+nVhebyKMJ8I58L/zIxkxtXZEDOx7WlSL052C+YT96x
    XzWsYrPJ/mXm0Ov13p8rsWZtt260x8jvdzUm7DwfvnPcPu7g6WOgqBcssh7rUng/
    584bEKNhzlTHWZaYcPkl1p1hFyGrRXicaNcB8DZiS5idtBmqNYgOrmkmM24Zxqi2
    x5G4OVqPZ2AnJmnMihDWv2LzQILB2jqCBRURHl85mGJLYiaj8NsnVE1E/8FWUiiS
    uBgd/SQs5Taryz9HyertGt8JugeohSfF0ECGL/iLkH1Ylnzzfq2JTkskCrEaEmTm
    Ho3MtwkCgYEA5ASzSmcy3+rrcquEDw79ML+rILYnz8QMcxAuh55a8GQ4A1HvlV7R
    n8f0+rJwIi0Rt8WNlJ5db4/GzpZf2sXocExMmXSimVUsLpa+MA97CVVloYf/RvxG
    iFzRu9AXMHohP6VUwTkkr/bgN3npBh4r2813jpxuaSvdYoN9PGIVB50CgYEAx/cQ
    gBsNxQoOcdw2cliDaRpv2O/uy1BJ/GtiLDY+ilYGB0lG5uHrk99dNHGrBNKiVPAN
    YTcqNeRsO38y5i4yzshg2KhLUuO13qI04H0ObgtrAfVzD26laOdMo4ZjlvlZIwAM
    NQprSfepglHR16JOztW7csy9HREbFfNwA7Smcv8CgYEAiovkmOfdvLrUN0fKJRA5
    fb5ob6bex9paqiuB6jupC/oJItNNXRhRDOIFk7KKeemio2QxI8WaBmh5JxutwJOS
    KXHi9TcueTaMcv57L16opsIxz5V/4hT1knO7qH/HJ1h+DVsbBZEAHr9F+89ibKo2
    ggb1hzy7xcG2cd5tYRxDpO0CgYB+DzfcurFkjSFsEBpW3YwCX0MxbJiKnZP2yC98
    lbm5dd+ZCk3jUXs0nnRgkmPwx2TEzQxyQ9edX+IHY/nPeEJZb6L2Eqphl+HYd0OE
    XfIR16re8kBV8zfduSrsT9VKoOjbkrUfXvEiETpQSIpUOSMba0wfZAi4YUdFAFGW
    VHU2OwKBgQCIZE3E9o/y02+RH4H6IWTljDIbJfj78u+a08Mub2yAgYwo9gy0JW7l
    ve7VxEpDIKz11zINSoOPBUxGur5WJGwRoDSLq9rSSyUhwBbVNHoPvRzruvYDE34+
    iY9E4OeOZFMrOPq1w9WUsLnOhYaH/sg10DaaY3caTY/Ev8TmM7WKzw==
    -----END RSA PRIVATE KEY-----
    
  server-config.postgres.json: |
    {
      "server": {
        "http_addr": ":4443"
      },
      "trust_service": {
        "type": "remote",
        "hostname": "harbor-harbor-notary-signer",
        "port": "7899",
        "tls_ca_file": "./notary-signer-ca.crt",
        "key_algorithm": "ecdsa"
      },
      "logging": {
        "level": "debug"
      },
      "storage": {
        "backend": "postgres",
        "db_url": "postgres://postgres:changeit@harbor-harbor-database:5432/notaryserver?sslmode=disable"
      },
      "auth": {
          "type": "token",
          "options": {
              "realm": "https://localhost:30003/service/token",
              "service": "harbor-notary",
              "issuer": "harbor-token-issuer",
              "rootcertbundle": "/root.crt"
          }
      }
    }
  signer-config.postgres.json: |
    {
      "server": {
        "grpc_addr": ":7899",
        "tls_cert_file": "./notary-signer.crt",
        "tls_key_file": "./notary-signer.key"
      },
      "logging": {
        "level": "debug"
      },
      "storage": {
        "backend": "postgres",
        "db_url": "postgres://postgres:changeit@harbor-harbor-database:5432/notarysigner?sslmode=disable",
        "default_alias": "defaultalias"
      }
    }


---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: debug
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
    redis:
      addr: "harbor-harbor-redis:6379"
      password: 
      db: 2
    http:
      addr: :5000
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      token:
        issuer: harbor-token-issuer
        realm: "https://localhost:30003/service/token"
        rootcertbundle: /etc/registry/root.crt
        service: harbor-registry
    notifications:
      endpoints:
        - name: harbor
          disabled: false
          url: http://harbor-harbor-core/service/notifications
          timeout: 3000ms
          threshold: 5
          backoff: 1s
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: debug

---
# Source: harbor/templates/adminserver/adminserver-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-adminserver"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: adminserver
---
# Source: harbor/templates/clair/clair-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-clair"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6060
  selector:
    release: harbor
    app: "harbor"
    component: clair


---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: core

---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-database"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: harbor
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: jobservice

---
# Source: harbor/templates/nginx/service.yaml

apiVersion: v1
kind: Service
metadata:
  name: harbor
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  type: NodePort
  ports:
    - name: http
      port: 80
      targetPort: 80
      nodePort: 30002
    - name: https
      port: 443
      targetPort: 443
      nodePort: 30003
    - name: notary
      port: 4443
      targetPort: 4443
      nodePort: 30004
  selector:
    release: harbor
    app: "harbor"
    component: nginx
---
# Source: harbor/templates/notary/notary-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-notary-server
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 4443
  selector:
    release: harbor
    app: "harbor"
    component: notary-server

---
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-notary-signer
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 7899
  selector:
    release: harbor
    app: "harbor"
    component: notary-signer

---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-portal"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    release: harbor
    app: "harbor"
    component: portal

---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-redis
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: harbor
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: registry
      port: 5000
    - name: controller
      port: 8080
  selector:
    release: harbor
    app: "harbor"
    component: registry
---
# Source: harbor/templates/adminserver/adminserver-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-adminserver"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: adminserver
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: adminserver
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: adminserver
    spec:
      containers:
      - name: adminserver
        image: "goharbor/harbor-adminserver:dev"
        imagePullPolicy: "IfNotPresent"
        livenessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        envFrom:
        - configMapRef:
            name: "harbor-harbor-adminserver"
        - secretRef:
            name: "harbor-harbor-adminserver"
        env:
          - name: PORT
            value: "8080"
          - name: JSON_CFG_STORE_PATH
            value: /etc/adminserver/config/config.json
          - name: KEY_PATH
            value: /etc/adminserver/key
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-jobservice"
                key: secret
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: adminserver-key
          mountPath: /etc/adminserver/key
          subPath: key
      volumes:
      - name: adminserver-key
        secret:
          secretName: "harbor-harbor-adminserver"
          items:
          - key: secretKey
            path: key
---
# Source: harbor/templates/clair/clair-dpl.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-clair
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: clair
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: clair
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: clair
    spec:
      containers:
      - name: clair
        image: goharbor/clair-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 30
          periodSeconds: 10
        args: ["-log-level", "debug"]
        env:
        - name: NO_PROXY
          value: "harbor-harbor-registry,harbor-harbor-core"
        resources:
          null
          
        ports:
        - containerPort: 6060
        volumeMounts:
        - name: clair-config
          mountPath: /etc/clair/config.yaml
          subPath: config.yaml
      volumes:
      - name: clair-config
        configMap:
          name: "harbor-harbor-clair"
          items:
            - key: config.yaml
              path: config.yaml


---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: core
    spec:
      containers:
      - name: core
        image: goharbor/harbor-core:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-jobservice"
                key: secret
          - name: _REDIS_URL
            value: harbor-harbor-redis:6379,100,
          - name: _REDIS_URL_REG
            value: redis://harbor-harbor-redis:6379/2
          - name: LOG_LEVEL
            value: debug
          - name: CONFIG_PATH
            value: /etc/core/app.conf
          - name: SYNC_REGISTRY
            value: "false"
          - name: ADMINSERVER_URL
            value: "http://harbor-harbor-adminserver"
          - name: CHART_CACHE_DRIVER
            value: "redis"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tokenServicePrivateKey
        - name: ca-download
          mountPath: /etc/core/ca/ca.crt
          subPath: ca.crt
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: harbor-harbor-core
      - name: secret-key
        secret:
          secretName: harbor-harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: harbor-harbor-core
      - name: ca-download
        secret:
          secretName: harbor-harbor-nginx
          items:
            - key: ca.crt
              path: ca.crt
      - name: psc
        emptyDir: {}

---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: jobservice
    spec:
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        resources:
          null
          
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-jobservice"
                key: secret
          - name: ADMINSERVER_URL
            value: "http://harbor-harbor-adminserver"
          - name: REGISTRY_CONTROLLER_URL
            value: "http://harbor-harbor-registry:8080"
          - name: LOG_LEVEL
            value: debug
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: jobservice
      volumes:
      - name: jobservice-config
        configMap:
          name: "harbor-harbor-jobservice"
      - name: job-logs
        emptyDir: {}

---
# Source: harbor/templates/nginx/deployment.yaml

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: harbor-harbor-nginx
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: nginx
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: nginx
    spec:
      containers:
      - name: nginx
        image: "goharbor/nginx-photon:dev"
        imagePullPolicy: "IfNotPresent"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        ports:
        - containerPort: 80
        - containerPort: 443
        - containerPort: 4443
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: certificate
          mountPath: /etc/nginx/cert
      volumes:
      - name: config
        configMap:
          name: harbor-harbor-nginx
      - name: certificate
        secret:
          secretName: harbor-harbor-nginx
---
# Source: harbor/templates/notary/notary-server.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-notary-server
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: notary-server
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: notary-server
    spec:
      containers:
      - name: notary-server
        image: goharbor/notary-server-photon:dev
        imagePullPolicy: IfNotPresent
        resources:
          null
          
        env:
        - name: MIGRATIONS_PATH
          value: migrations/server/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-harbor-database:5432/notaryserver?sslmode=disable
        volumeMounts:
        - name: notary-config
          mountPath: /etc/notary
        - name: root-certificate
          mountPath: /root.crt
          subPath: tokenServiceRootCertBundle
      volumes:
      - name: notary-config
        configMap:
          name: "harbor-harbor-notary-server"
      - name: root-certificate
        secret:
          secretName: harbor-harbor-core


---
# Source: harbor/templates/notary/notary-signer.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-notary-signer
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: notary-signer
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: notary-signer
    spec:
      containers:
      - name: notary-signer
        image: goharbor/notary-signer-photon:dev
        imagePullPolicy: IfNotPresent
        resources:
          null
          
        env:
        - name: MIGRATIONS_PATH
          value: migrations/signer/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-harbor-database:5432/notarysigner?sslmode=disable
        - name: NOTARY_SIGNER_DEFAULTALIAS
          value: defaultalias
        volumeMounts:
        - name: notary-config
          mountPath: /etc/notary
      volumes:
      - name: notary-config
        configMap:
          name: "harbor-harbor-notary-server"


---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-portal"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: portal
    spec:
      containers:
      - name: portal
        image: goharbor/harbor-portal:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 80

---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: registry
    spec:
      containers:
      - name: registry
        image: goharbor/registry-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-harbor-registry"
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: registry
        - name: registry-root-certificate
          mountPath: /etc/registry/root.crt
          subPath: tokenServiceRootCertBundle
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-harbor-registry"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-jobservice"
                key: secret
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: registry
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-root-certificate
        secret:
          secretName: harbor-harbor-core
      - name: registry-config
        configMap:
          name: "harbor-harbor-registry"
      - name: registry-data
        emptyDir: {}

---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "harbor-harbor-database"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "harbor-harbor-database"
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: database
    spec:
      initContainers:
      - name: "remove-lost-found"
        image: goharbor/harbor-db:dev
        command: ["rm", "-Rf", "/var/lib/postgresql/data/lost+found"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
      containers:
      - name: database
        image: goharbor/harbor-db:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        envFrom:
          - secretRef:
              name: "harbor-harbor-database"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: database
      volumes:
      - name: "database-data"
        emptyDir: {}
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-harbor-redis
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: harbor-harbor-redis
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      containers:
      - name: redis
        image: goharbor/redis-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath: redis
      volumes:
      - name: data
        emptyDir: {}
---
# Source: harbor/templates/chartmuseum/chartmuseum-cm.yaml

---
# Source: harbor/templates/chartmuseum/chartmuseum-dpl.yaml


---
# Source: harbor/templates/chartmuseum/chartmuseum-pvc.yaml

---
# Source: harbor/templates/chartmuseum/chartmuseum-secret.yaml

---
# Source: harbor/templates/chartmuseum/chartmuseum-svc.yaml

---
# Source: harbor/templates/ingress/ingress.yaml

---
# Source: harbor/templates/ingress/secret.yaml

---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml

---
# Source: harbor/templates/nginx/configmap-http.yaml

    
---
# Source: harbor/templates/registry/registry-pvc.yaml

