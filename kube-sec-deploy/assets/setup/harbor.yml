---
# Source: harbor/templates/chartmuseum/chartmuseum-secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-chartmuseum"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  CACHE_REDIS_PASSWORD: ""
---
# Source: harbor/templates/common/certificate-secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-certificate"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM4ekNDQWR1Z0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFVTVJJd0VBWURWUVFERXdsb1lYSmkKYjNJdFkyRXdIaGNOTVRrd05UQTVNVEkxTURRd1doY05NakF3TlRBNE1USTFNRFF3V2pBVU1SSXdFQVlEVlFRRApFd2t4TWpjdU1DNHdMakV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3VwVDUwCjRnSjlMbGxtc2oyc21yRDhCNkk0Vm9YM2FDVWFGUWwxaG9KRFFoR3VvMVJqV2FDa1YvcldHU01PSFpVM0RGcmMKWUxVaWd1aXk3YjhXRHhmVEhWVHhOQ1hjbnVLTVZxRWpWM2k2RkVxeXVNTG5iU3lWMTZtNDJaY1QzSy9PV3UzRQphb1lWL1grSnFVUUhKbHJTSThDTUJqaGVHR2hrc0FySWRVWHJWdHJHSi9ISWZzYmlwcXhxZWp2eThPTlo5akRJCkd5dTRxTFFOV200MHFoNE11MW5mYWEvdFA4WWRXcnJDcG5HNXV2UDgvMGRwb3BmbjFNN0tDaU5XaDYvVFlMbm8KME1iTkJrQmhwNGxEc0VHV25xL1p1SlpOYmk5UjNEU2lERWZ6elVrUWVJOXB6anZ5T0pOR2JBZi9xRVhweXQ2OAo2QU9BaFlvVzZ1UktraGQvQWdNQkFBR2pVREJPTUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVCkJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBUEJnTlZIUkVFQ0RBR2h3Ui8KQUFBQk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ29odFUycGQ0bkdJSVp6SUpmRWxuVk12Y3RHSlFaa1IxUwpIVndGcHd1R1Z3ODZVOS9KL0FqYktaWXI0b2gzdGJiZ1Fla2h0UnN2L3BVbWFVbk5iK0xBR2cxV2hhQ2VjWVpCCnhqSmh3U3VHZU1WZCtsa3g5V0kvc1FBZGxITkl4ZnFiSXFmK0oxWjhzNnY5TEJYclZKWVFCaTNHWEtKU2RWVG4KUDdyTi9nSFA5a0lpOVEvTnFnNmlVdEZvVTVkSGpRd3pVVldyMTd3TGQvUjhJN2hZeE9TM3c3dDJFZTlSK2JVYgo1ekFkWUVkcURueTNzZjM1dytvbkZvRnhlaVVROUFhVno0T0lKeGhucXlsWTR0b0VrL3VoT1VDNklHOUdPRW04Cm9HamJLNG9sT2JZZVJXdFNwdVQ3Y3BaQnc1Um1yVHdqb0xUaUEzREljSzNvbzFpcU1RbDUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcnFVK2RPSUNmUzVaWnJJOXJKcXcvQWVpT0ZhRjkyZ2xHaFVKZFlhQ1EwSVJycU5VClkxbWdwRmY2MWhrakRoMlZOd3hhM0dDMUlvTG9zdTIvRmc4WDB4MVU4VFFsM0o3aWpGYWhJMWQ0dWhSS3NyakMKNTIwc2xkZXB1Tm1YRTl5dnpscnR4R3FHRmYxL2lhbEVCeVphMGlQQWpBWTRYaGhvWkxBS3lIVkY2MWJheGlmeAp5SDdHNHFhc2Fubzc4dkRqV2ZZd3lCc3J1S2kwRFZwdU5Lb2VETHRaMzJtdjdUL0dIVnE2d3FaeHVicnovUDlICmFhS1g1OVRPeWdvalZvZXYwMkM1Nk5ER3pRWkFZYWVKUTdCQmxwNnYyYmlXVFc0dlVkdzBvZ3hIODgxSkVIaVAKYWM0NzhqaVRSbXdILzZoRjZjcmV2T2dEZ0lXS0Z1cmtTcElYZndJREFRQUJBb0lCQUgvMmZZdkFxZGcwNUxaMQpkUEVLS3hHUE9sSVRPM2Rxckh5dTIwNXNidmQrNmx2T09wL001UUpsb0ZuTTh6MTllWDVySkF3REk5VVVuQkcyClYyTi9UWktYRkV6alM3YWFDQjZSdnVHWlR0RHcyMGFXVCtDbndwcEwrWVNDa2NxdzBYUGVkZ2FMa3BGOE96MlAKYzFQVnk0ZmJRRktZb0NaNXRjdkluUzRCbDJoMTlrazV1YWgwalRBRXVmdUpXYWdiMVIwSGM4RXdxTDE5QkszUQovdHlwbFBoVTYra2FMcndaR2p0Ty9ad0h0QXViRkpHME4wdjNOVjJNNm55UEJPSzN5czA4T2E1SSttcHR2ZXpHCmpYaFgyTUliOFVWM3cySTlvQmNNUEkyWkUxKzQvaDRsNHFtY05OSGlsdTlDQnhSM1V3Szd5a05LOTBNTXZ6MUQKZ0FzeWF0RUNnWUVBenNrMVp5aERXTWhlNEpBc2U4d2crM0FyTTZRSyt1SVFvWnRoK0VHUkdpSEdIcUg4cVd2UwovWTczU25IM3JJY3VTZHczSjNldUd1VCtxeC9CUWFCV29pSWVJMWlqcFJVOWxoTGhYbHMwUEs5VVRxSTJRVE90ClRqcERZL3g3Tnl4TlowOWhBR09VV2IvY0hKeW8xcVMwQ1JCZ2h3dFZDdzUyV1NIVVdhcThEV2NDZ1lFQTJEWFMKSTVLSS9abWpkTDA1dHY3V0JRY2Q4WjNlYXptYlZ0WERHaXltdDBGWjJnT3BYWFRSUlJkazlBYzdscjFTRHJmKwpDM1lzQ0ZhcklIYkMxTDlmcXJ2dTNmZUV2eUxXM0VUb3BnMzdpcDI2QWhtczV5MFVQZWtYUjNMWGtOZDRUVHgrCmE1bmRSeWRTeUhIbGs4OUhlTGFaSnBUOG8wQ2s2V21NeldrRFBpa0NnWUJyWmdsOGVHYnlGNjlmUnNJejBnTlgKVkJ5OEIzbEVjR0ZlN2dybUczZTNjTThyWGNxU1c5UUxxVk02c1JLSDR2WGhtcVJ5dFRBUis5bGhHMjhPSEs2aQpLc0lvYllNZzNIVk9HcVErazNRQUNMZnExMGtDZUVxTWxLb25waHlBdlZ1K1NuWUE4N2M3SGZDK1U0ZEZZK20xCnczRys4ZDNMamtsZFpicWFqNWg0QlFLQmdRQ3A3bHMwRkRiUlExRGlMdHRPeGFvR2w1cGtUWlVEcDJvODdKT0UKWGZYR2NIbWpUVjl2RWFKczhEOHJRUWdIcU5MMnVJdldERkg5VjhqMklnRnRYdUJjKzRwNU1OSkh1NlV0eUljbQpCRFZndENqKy81a1N0UzZFbmsvcW13dHNUcjNCenJyNTdSdXFrZkNSbEZ0Qk9oZk5lNDZSY1dYREZjckhuV3JLCkF6QkdTUUtCZ0Iwbkk5MThrTjlBZjVWYUNEd0dIK2plTWRGWXJidlEwY1ZscjVRWDdyWGFvRlN4eUJPbjhtMHoKZUVlczRMYjFUNGp1aEFzZUE1RE1uZC9TNzlJMTdVNXlwMWRrOFB2MXhHMVVWU2NPRi8vYVJqYmcxTzdKY2V0Mwo5NDFlS3o4QWlaRWVxbUQvZ21NQm1qRTE1RTZlRUNVK1BHTHhoUHE4MjdlQjJkdzZBMFZWCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1VENDQWMyZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFVTVJJd0VBWURWUVFERXdsb1lYSmkKYjNJdFkyRXdIaGNOTVRrd05UQTVNVEkxTURNNVdoY05NakF3TlRBNE1USTFNRE01V2pBVU1SSXdFQVlEVlFRRApFd2xvWVhKaWIzSXRZMkV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3d1MXBSCm9HWVhYMElGSml2dmF2cnN2dmtuWER4QVp2NUJONWp4ckhyaG1TNlRpbHU0K0dna0lCd3NieCt4TmlsV0p5NnIKcjhZTlZZeDZ3ZDJLa1hQNzdqcHFUZnBMSktVOEtqRWlvZnF5TzhPbHdPYlM5Z2lSS2szclA5aHcvSG9WYjVxaApIMVowaFFQRmROdVczamZQQUZ3SlRCSko3ZEJWbHN5MUp4VE5pRmZnbmoxOTIzbFFVK29KNkNiYnZHTlpkd0lICnMzL1I4RTdxL003TVNSNXFJNEEvV0ZyblN1M2hYSjRMUkZiSU9RUFJnOXNJTWFCS2NkeW4zdUVRNGJIVDFua0QKY0Z6YTJCeU5pbFlJMHRwK1luaVVVSjllOEdIa1pJd3NkUXVPTHBKUlFMOVdNdjNWdzNyd1A5WnhpVDMzamZ4YwovNjRtRG5qeFp6Q1F2MVFWQWdNQkFBR2pRakJBTUE0R0ExVWREd0VCL3dRRUF3SUNwREFkQmdOVkhTVUVGakFVCkJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU5CZ2txaGtpRzl3MEIKQVFzRkFBT0NBUUVBTksyT21nZXZBV2tzT2hjdXlhME9mV2dqUEtRUzFBV1FzN0tiVnl1YTFuazRsRUdiZEREbQpWWUhhZE02Z1RxZEowaE5mM3NyaHRzdDNKSUlEMHBFeDBSOW5CS0xQbzE2UkRGc2xZZ1lxZ1lYaTM5cXY1QU01CmdVeUtURVpOUFNtdXg5NnB6THA1NW54Uno1Y2FXRTVBOUlTNkR2WGRiTk9MY2VzK25SZ0NXMXEzRlU3bjV1emkKakE1bUQ2OVZhOU8xNlZpTzRmTldFeklZT3NqREw0L3J1NFJkdnVQdVMySTgxcjBqUS9RS2Q4MzZxb2F4SXI3bgpCeUs0UmtoWE9tekVNeTd1blliWjVoYlp4VTRCK21mck52U0VBb0lkYlkwVXZGLzRmNDFVWjNsZGlWRE0vLzAvClAyUW05VGNzb0k1TnhBZWtVMVVPUjMzZFREN2JSRm51S3c9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "UXFueWE0bHFFVFE4aE1zMA=="
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUwekNDQXJ1Z0F3SUJBZ0lKQVBZL096TE1lVnEyTUEwR0NTcUdTSWIzRFFFQkN3VUFNQUF3SGhjTk1Ua3cKTkRFNE1ESXlOek0zV2hjTk1qa3dOREUxTURJeU56TTNXakFBTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBZzhBTUlJQ0NnS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQWFOUU1FNHdIUVlEVlIwT0JCWUVGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUI4R0ExVWRJd1FZTUJhQQpGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMCkJRQURnZ0lCQU1Bc0V0VmxFTE13ZHRjaWZIZU9UMGtPbWY1d285SW4vZUZTZ3NjQ3pCTURhUngyQjNxMzZBb1MKSWw3WFdBWnBldmFSN1c3eWVBUkthQXNoQkxoeWdVcUxEMHpXYktsU045SHByZDF3ZHBNMGZmeVBwTjVkeE9ZQQplcjA0eTEyR1JuQ2JNWXFpNGN2enRQNFRpblhxcTJ5SFNZaExiTzlxa0k1Z2JXVnhrUnVJY01Ldml4ZGRsbE5ZClEzb2JKYURESG1vdk0zK2cvRysxWUZndDRxRVMzOFhuSjdCclNzaEhubjVFSVFoMjg2eGZKcml5cksyaEhiTEoKcXowWXVGNkczRFhQZVdHZ1h2ajBIaXBjMGY4VURaa0tray9lR0VJNnZFa3l0eXZvZXBvWkkyWGJBZi9aTXk1bgpLd3VoRW40aGhrRk13V2FTV3AvaDBRZE1DYXhrNEJWU09xbU5WYUxTQjcrRmpzSWo0Q2FzRm90WWl5SjJncFJCCk5mOFFhUzRiejBUbjFlQmJDOGtzaitlM1pXZVgyYjV3Vk1qcWw5alR0MlgxSUNzOEtLZTN2RUJranFUMkFVaTIKNTJUdEt6bTczYVdyei9HUHkvUTJMQ29yM0ZoOUZHVlNCT0JCRFhHeTZNSnBOSEpuWVZIOUVFTkZHT2g4NW9sMQoycEFET0JCNXZBVS9rTEI1TEhQajJrdWUvRk1pSGFObnJTWUlHck1sQlNYMmpqOUVZYTF1dVVIK3BkNE1CajFGCjV1SDhPUmlhUTZodDIrV0hrbHhpYzFSajV5VFlRd1ZsSDcwQ0JPbitxVkVkbzYzeVF3ekFNSktGSXdsR1VRRVgKamlsamdjODZxNGNadFVURnJjd01pZGJrKzhRNitKYkRWZzdIVi8rcG5DK3dudjE5N2t3ZQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQVFLQ0FnRUFrOHE4czRQcnZZYnk3OVVWbFdKTktxY2V5a3dCa3hFMWZqcllPUldRMmhpQWlyeEdWNSs4bERULwprNnVqbTFFV3diNUswSHh4UktrYitQRWExSHFOTkhFNkp4TnBKS0s5ZXhEbFlBUSt4N2RGQnFWci8ybmF6bW80Ck1COE1MWWxtSXp0V1dvU1l3ZThvMm1FZzRxK2J4WXM1SW1kdTdBa2hFN2RKNjNobTIzZ0xNZmVNTGFsUnFvcHUKWEJQd0U1blhQNmFHdVVOSHRHMUs4dFFKRGxaWStMRWJBZU9mUmVOUWhUOU5kUnVrWVNXNTc5dmZLYmxKclN2egp1bGc4OXNWbTNjV0VLNXBCNnJqOXdKYks5NHZvS2Z0VnFiYnVCd1dqZDFhOXBpYktod1ZCZTJMMkZXaHBTWmM1CkYvY29DN25qVGFZVDZ0cjkxeTVWaGhKaElaUUNmL3Z2NFpsNVhoRkhzNVZUWk5iTS9PZnF5RlFMWVhWSk80OEsKRjd0bWF6QUVRUUJRd1ZacUg5QzlOUWR6UEhXbWMzOE9raHRjMXd6YXFuL3JnOSsxc2dBTUQ4aFdDdFFKVWU5NwpiOXltaDVBMFo0UVhLcHlGVDBiK3BYY0QxalJoYTA3VXRrWCsvekxKOUhwQVhjVW16a0crajVDWE5wbnhzSXE1CmZKRmVxM2hCajl3Nm40aCs1ME00VzBGc2U1WW9FVXNjM0IwZno4QmxRQmIrWUpMRkxOSDM0TUg4cDFsMFpEWUoKeWFlMHBzeGxCaWpnNE9QWitXQ0JhK2p0Rlc0TGlXZ0VjeHdnejh3K2hFT0FRcjJhMURjN3c4amQrWTRJSzhVbQpsVFZzNWRicDRtT21QTWxSdi9HTTdrRHVkRnFiTWczWUZ3WGczUWJxdVZxTFp6RXpqVmtDZ2dFQkFQSktaYkNXCllmTGVqa1MvZmtSeVYzVkliNTRtS3dRSG9NV3ViODh0UGdHdVh6anNKeWQ1UVRRNThQcFVqWHJMSG1uOGxTMisKdmlFOEdKeWxLd04xeU1sWnc0MCtrWmhwSFVwQ1d4LzJaS2pBcXZxQTlPT0tvMmZ2NkhkL3dPQW5VNEN0aW9DMQpwcmk3bEtGWVhvUDhEdFFWd0hZdkl6Q1JxRG5oYzRtd0pEcXpUQzl4ZHVJK3N2eHpsNHhIODJmeDBqclBpRlkrCi93T2RYanlmSVBqeWhIQzRqUFRXYmFpcndYUzlkQmpTbDEyOGFJUlQ1ODAveVhFL1NZQXVnZzA1akt0ZzV6UUEKU28xM01UZXpYUkhYZE8wZGkzdEVNSEdSRUVrRnBlVm5uUFF2Q0NlZEswRFYzNmlOd2lXYzhwd2RmTE1WbmVUdApES3daZWRDeCtvLzdldjBDZ2dFQkFPdTQ4REdFSkpKekh4VlI1bVkxSzJBbFp5WXRwVE9XZWhLMXpYNzRKdk0zCll4TjRuZCtaeDVuOXVTUG1tS3pxRjNUVSs0NFJWdGRKSzZlam9GRThkTURUTldhU0xXL1pEbU4xblQwbmp2T24KSVdKbjU5eW5PQ2hXV0taZ1haLzlVcUdSN1B0Nk94U2trZXg5Yy9mWUJzTVgveHVzZFhRaWdlb2dsMGlPWVZGVwpnWElpaUxSTEhwSEpzSy91TnhJaXpqMGhUWVluN3VEN1BSRU53RlJjQ1lmOEoxZVVGYmQ2RHVDVldlUUNLV2dmCk5kMnRTV29pMFZ5bGo0dVVYOEl3MHRqTE5NRDVDUkVKRWs0R1N2NEVEU212VWR2MUxpQktKQ0wybEVjZ29QZUMKb09EMmlDYzVLcWdubVFyYVJpbEZGazhSVlhBOVBXWkdZM0MwYjZUVm1tY0NnZ0VBTlpPMkFPS0FMbENBYlR0YgpGSStrUDA4UlA0dDVINThBTWpac2l3ZWFHbzBRaVduUERxK0ZkNk1JWXBLbjVtdGNBbHZVTVJWb3ZiaW9TSnROCmM2cHNCL3BOZjhKQ044Mm1xSEViN1dseXdNNDZBTUxiWkNXWUZMZThWQkJ2K2lFNEdkQkdQRWZ1NGhLNHZ5VG4KWVpBdlJ6NjRIR280QWRsenRiamc3NlYvbld0Z2dXMDV1TFhjcG01NUtKQVFodisyV1VMakJ3OVBIT0dEb1N3ZgpBbTIrVTU2N3JMaHQ3MHByc1FEajEwbGFKMlF1U0hTMVlYR2xmZUZjdzNlRlVwOVROK0pwdmRvQ29sMmxDSWdsCklIamdaajZPUldmQ3Zwb3hXN1JnQnVadWtxQ0QwUjYwSGRZdGF2eE4zanRpZXBzYXBBODNweE8wSmFwTWdaV1oKcnBVUmtRS0NBUUJPY0V2OUxpdTlUL0dYOXBqa2llelZJWjBoWnk4QjY2RFRlUXZZcEZyUnRDeVQzaDhxdU5GaQp2THRPNXYwSERSNmhFZjVqV0FHOXdldDA3VTM3dWxKZmwraTlLUWRWb0xUWkE5bys3MXJ5V1RzU3MrREQzQ0VqCnl4ZlV4VnhpVUxtZWFpQ2h6aHE2MDhoN0dZUHRoVVU2eGxGdHRBV2hqNW9MZnF6WXlBZzZPTDc2YStOeG0wMmcKMWF5bDNtOFU2ZUFYRjIza3BvVW0rSE5wcVZuR3VKbXpWb1VBNzVZS1orTnJlRWRoU0JiZlB3TjlzSnd0WlVpbAp1N0g0a0hjTTk1SXg4ZXlzQ2pLcUtJcWV6QmxJVGJEVG5qTnZMamNiSjVDKzBhNmx2SVhUMXZRUjUvZUdsYzlNCkJXRTM2MHBOa1YvTEQ4bU9mOUplcGkyUTQzb0RMOUVoQW9JQkFRRFRXSW1meTBLOWdHekEyclB5MTY5bVdZUUsKT2xjbkQzK2hRcTZ4NTFabjFlL3RleEZlVmxoSG40cnJuUmRDRk9BcDQ3dUZrSjJtNzJHQ1ZENzRFd1F1Y0s5eQpBRDVqb3JxZ1ZIcUNLWmRrSGpiMlY2ME16bTZnM3J0TDlXSlhGVkx2TkJiL1FHQjJ2Z0hWT08wenFpcUdaajRlCkV4N2wybS8vNVNFNERMdG43MEo5Q2dHMUh0WENTOGRXckdQTDFwekRuazhWWHRub1h6YjBMQ2hMVUZFZ1pSbWgKY1Y2QUZIRUsySDh3Qkh2aU55ZWhzUlFpRGtsMkFpV09jSk52a3pXNjhjazJuSmpSV3lQWUsxSkwzTkNLcEIzUQpPb2hyUDBmSGNXQVhNVzk3d0ZYWmhSZm5RZkR4eElPbGozTWNZVDBBbGFuWGQwRjROR2MyTnZtcGh4MDQKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  CLAIR_DB_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-database"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secret: "VU96Qkc1VjdHTHNLdEV4cw=="

---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "bHFjT01ueWliNTY2U2NQUA=="
  REGISTRY_REDIS_PASSWORD: ""

---
# Source: harbor/templates/chartmuseum/chartmuseum-cm.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-harbor-chartmuseum"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  PORT: "9999"
  CACHE: "redis"
  CACHE_REDIS_ADDR: "harbor-harbor-redis:6379"
  CACHE_REDIS_DB: "3"
  BASIC_AUTH_USER: "chart_controller"
  DEPTH: "1"
  DEBUG: "true"
  LOG_JSON: "true"
  DISABLE_METRICS: "false"
  DISABLE_API: "false"
  DISABLE_STATEFILES: "false"
  ALLOW_OVERWRITE: "true"
  #CHART_URL: http://localhost:30003/chartrepo
  AUTH_ANONYMOUS_GET: "false"
  TLS_CERT:
  TLS_KEY:
  CONTEXT_PATH:
  INDEX_LIMIT: "0"
  MAX_STORAGE_OBJECTS: "0"
  MAX_UPLOAD_SIZE: "20971520"
  CHART_POST_FORM_FIELD_NAME: "chart"
  PROV_POST_FORM_FIELD_NAME: "prov"
  STORAGE: "local"
  STORAGE_LOCAL_ROOTDIR: "/chart_storage"
---
# Source: harbor/templates/clair/clair-cm.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-clair
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: clair
data:
  config.yaml: |
    clair:
      database:
        type: pgsql
        options:
          source: "postgres://postgres:changeit@harbor-harbor-database:5432/postgres?sslmode=disable"
          # Number of elements kept in the cache
          # Values unlikely to change (e.g. namespaces) are cached in order to save prevent needless roundtrips to the database.
          cachesize: 16384

      api:
        # API server port
        port: 6060
        healthport: 6061

        # Deadline before an API request will respond with a 503
        timeout: 300s
      updater:
        interval: 12h

      notifier:
        attempts: 3
        renotifyinterval: 2h
        http:
          endpoint: "http://harbor-harbor-core/service/notifications/clair"


---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = dev
    enablegzip = true

    [dev]
    httpport = 8080
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "harbor-harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  EXT_ENDPOINT: "http://localhost:30003"
  CORE_URL: "http://harbor-harbor-core"
  JOBSERVICE_URL: "http://harbor-harbor-jobservice"
  REGISTRY_URL: "http://harbor-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://harbor-harbor-core/service/token"
  WITH_NOTARY: "true"
  NOTARY_URL: "http://harbor-harbor-notary-server:4443"
  CFG_EXPIRATION: "5"
  WITH_CLAIR: "true"
  CLAIR_DB_HOST: "harbor-harbor-database"
  CLAIR_DB_PORT: "5432"
  CLAIR_DB_USERNAME: "postgres"
  CLAIR_DB: "postgres"
  CLAIR_DB_SSLMODE: "disable"
  CLAIR_URL: "http://harbor-harbor-clair:6060"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  WITH_CHARTMUSEUM: "true"
  CHART_REPOSITORY_URL: "http://harbor-harbor-chartmuseum"
  LOG_LEVEL: "debug"
  CONFIG_PATH: "/etc/core/app.conf"
  SYNC_REGISTRY: "false"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL: "harbor-harbor-redis:6379,100,"
  _REDIS_URL_REG: "redis://harbor-harbor-redis:6379/2"
  PORTAL_URL: "http://harbor-harbor-portal"
  REGISTRYCTL_URL: "http://harbor-harbor-registry:8080"
  CLAIR_HEALTH_CHECK_SERVER_URL: "http://harbor-harbor-clair:6061"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "harbor-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
    job_loggers:
      - name: "FILE"
        level: DEBUG
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: DEBUG
---
# Source: harbor/templates/nginx/configmap-https.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-nginx
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;

    events {
      worker_connections 1024;
      use epoll;
      multi_accept on;
    }

    http {
      tcp_nodelay on;

      # this is necessary for us to be able to disable request buffering in all cases
      proxy_http_version 1.1;

      upstream core {
        server harbor-harbor-core;
      }

      upstream portal {
        server harbor-harbor-portal;
      }
      upstream notary-server {
        server harbor-harbor-notary-server:4443;
      }
      
      log_format timed_combined 'remote_addr - '
        '"$request" $status $body_bytes_sent '
        '"$http_referer" "$http_user_agent" '
        '$request_time $upstream_response_time $pipe';

      access_log /dev/stdout timed_combined;

      server {
        listen 443 ssl;
    #    server_name harbordomain.com;
        server_tokens off;
        # SSL
        ssl_certificate /etc/nginx/cert/tls.crt;
        ssl_certificate_key /etc/nginx/cert/tls.key;
      
        # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
        ssl_protocols TLSv1.1 TLSv1.2;
        ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
      
        # disable any limits to avoid HTTP 413 for large image uploads
        client_max_body_size 0;
      
        # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)
        chunked_transfer_encoding on;

        location / {
          proxy_pass http://portal/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          
          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;

          # Add Secure flag when serving HTTPS
          proxy_cookie_path / "/; secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /api/ {
          proxy_pass http://core/api/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;
          
          proxy_buffering off;
          proxy_request_buffering off;
        }
        
        location /chartrepo/ {
          proxy_pass http://core/chartrepo/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /c/ {
          proxy_pass http://core/c/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;
          
          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /v1/ {
          return 404;
        }

        location /v2/ {
          proxy_pass http://core/v2/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          
          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /service/ {
          proxy_pass http://core/service/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          
          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_buffering off;
          proxy_request_buffering off;
        }
      
      location /service/notifications {
          return 404;
        }
      location /notary/ {
          proxy_pass http://notary-server;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_buffering off;
          proxy_request_buffering off;

          rewrite /notary/(.*) /$1 break;
        }
      }
        server {
          listen 80;
          #server_name harbordomain.com;
          return 301 https://$host$request_uri;
      } 
    }
---
# Source: harbor/templates/notary/notary-cm.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-notary-server
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: notary
data:
  
  
  notary-signer-ca.crt: |
    -----BEGIN CERTIFICATE-----
    MIIC8zCCAdugAwIBAgIBATANBgkqhkiG9w0BAQsFADAbMRkwFwYDVQQDExBoYXJi
    b3Itbm90YXJ5LWNhMB4XDTE5MDUwOTEyNTAzOVoXDTIwMDUwODEyNTAzOVowGzEZ
    MBcGA1UEAxMQaGFyYm9yLW5vdGFyeS1jYTCCASIwDQYJKoZIhvcNAQEBBQADggEP
    ADCCAQoCggEBAOL5RSG9MHK/4XhAndb7IHugKvWF8ORM6OD+jjmFx/LFF/UNRpYY
    GCjfrjrqLZwgmLisvqHFWrMgC/AuI/L1yhl8OLBymEaO7byM0QGCDQFYKQEXTFek
    hUaw0XLsEU5A0jlv77997QEVe8yUazv1m7CnS46BwHkTBPClOw97Ofz1wq+MvarZ
    cIyi6dAd2h5S4yxorv8if88mcAJtH+HR1gT7faaO/9LlGbU1bVT97FR9dSomY3sk
    RYeuVkPz7Ni29ZcQsQ79SSE2C+4o6yM+3ItJCNRcgk0aCSvS6JVC9VArjAiQxh7p
    Kn7Y2oFFPAtekhAQOcVt6owbfGms80xit3ECAwEAAaNCMEAwDgYDVR0PAQH/BAQD
    AgKkMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTAD
    AQH/MA0GCSqGSIb3DQEBCwUAA4IBAQCkjndfp9cAo9hmwlxseRNNo0+Jjb3EMgy7
    jLUQtBsR2VswmFaJbzxlwPMy24b0mFvuqQJwRKs1PQ1nCdatA1+JfQVKhxFBPup4
    SioeKH4wrs7SmfAh7EP9xWer7sRjDLxH6dsH+XwOXH6gXCCQYEKJ8fbQH8HMzO53
    WoRPmaC6SEeP10ESGU6+6P4WqvZMKccbuSpQd0Trkv7lyBjXNK5ck2edvkZvep+t
    PyKrCHiOl+3qLXi/majKwSoF4kewev6DvCsVi1/Bw9rVNEKxmLVnN2rEjpj8RA3/
    CtNO3Kx5Y/r3lpXpcbSmITa8bu0EqNQ0N9SMZiMTntx7UxDdqJEC
    -----END CERTIFICATE-----
    
  notary-signer.crt: |
    -----BEGIN CERTIFICATE-----
    MIIC+zCCAeOgAwIBAgIBATANBgkqhkiG9w0BAQsFADAbMRkwFwYDVQQDExBoYXJi
    b3Itbm90YXJ5LWNhMB4XDTE5MDUwOTEyNTAzOVoXDTIwMDUwODEyNTAzOVowJjEk
    MCIGA1UEAxMbaGFyYm9yLWhhcmJvci1ub3Rhcnktc2lnbmVyMIIBIjANBgkqhkiG
    9w0BAQEFAAOCAQ8AMIIBCgKCAQEAug1LVCz58y7qmCNX9TMHo7x2NbA1PUqSP1Eq
    eWfHRLqEaiJ0DeQXeGFE+CcIEkQwwxWEHF0IE133jn2AvvBfRW6rLKKwQLCgRAJ4
    aU4WtWLotujzIIl/1nxrgll0gmbns26+0Rblw2WhaCY+K1fJeifqZ2yipXZH7oB1
    XbZQ36orK6RqQ+oF+2KVzmssp8gUDOEJV3mt1F2tOn7ABoMBBjAdReuTebXK8hOP
    dFwFlxCkf9meglrFZodGuTzLQz52aufK4+iiFMOZq6wzcNOp6HNWitUCE5xjE3zo
    Kzwoy/CfXD2i9nBxzxhyeAlJFT7aWa8GvUxMdqlWywiEoSlyKQIDAQABoz8wPTAO
    BgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwG
    A1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggEBAFwFZR9KHM6CVv7elHFHdbXS
    eRRNgUY5YNiyUgpT250AySeZINYWGePu+WJdWUNNBLt9kwjcNUCjHKWVcbaVLaI0
    og+OR5B4MpL8fSE6yIRqid1k5SpRh4w4IaQyiRo3XtL7ddN5dnWn0cc4E3Crc35e
    XIcavWcmbSkOQsQYJbNP4qesKlcWXoeQMjX3HoIi8brjcKU1wQmu10wem7ocfw0A
    ZoekDdH8nH8PyS8NRBufb0Vv8ctmD7IXXP+ScBG4hcoXmYWJr9cUwXh5fHLqdJTi
    xUZLMWbNfJnN4P0/TWLhR/dnFuk/5jGoFcRx6TMp6i/KmFC6EYsHuMdTvhS/03M=
    -----END CERTIFICATE-----
    
  notary-signer.key: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEpQIBAAKCAQEAug1LVCz58y7qmCNX9TMHo7x2NbA1PUqSP1EqeWfHRLqEaiJ0
    DeQXeGFE+CcIEkQwwxWEHF0IE133jn2AvvBfRW6rLKKwQLCgRAJ4aU4WtWLotujz
    IIl/1nxrgll0gmbns26+0Rblw2WhaCY+K1fJeifqZ2yipXZH7oB1XbZQ36orK6Rq
    Q+oF+2KVzmssp8gUDOEJV3mt1F2tOn7ABoMBBjAdReuTebXK8hOPdFwFlxCkf9me
    glrFZodGuTzLQz52aufK4+iiFMOZq6wzcNOp6HNWitUCE5xjE3zoKzwoy/CfXD2i
    9nBxzxhyeAlJFT7aWa8GvUxMdqlWywiEoSlyKQIDAQABAoIBAQCyxHFb+TdVlf/t
    nRA31weBKWW/4obVVKC/XALe0nuiq0DuJhqy+jYfAf9eHUrhGkpsOHFPO4i16zUh
    4a9iR96S/WpWIiAOmGf10RXXwSOKt/X5Qk3SNqvx8Gzwu3l6jtwVCdUpXMH6hN2Z
    EB3uUZSS3mWZaMXDDKrDHQUovTRqIxmXB+LMo8oD7j8iLL+kqE2A+qzWKfo71ssw
    K1PYl0/06TqzpNQkR6zLcOUE4Z/NB2kmHeBl7RSMVHP2JqwOUPb08KXfRCY8f6aE
    y0z0+kOtkt4k4XJg//TTLnPYyCFH69zvkhPC325ykhSJ1kssj4iIlAgU+uaK/0qq
    dMtAM/MtAoGBAN0LEJRShBTxasTKB44qqKPk5JTgcHYsEZo4hDUBgk7eKFYxYBGU
    /4nWTeHzivU1wrwgwtfuAhSzor2TRUwb73vmtA6wJZx6n22IeiWxe51x75LjATCJ
    84cBiwNlyy6TFDp+en9xtKCVPLUDsY4f579/V7KEFoTJX2tclJXzbOfTAoGBANd5
    m2TXqHK/405zxLRsfuVw1z7TxZJ8i60/bboXvDqZ67hYBQrUpoJFj7Irz7UbII3E
    w3uBVbmCxmsYPVKRmfaNliiLYvWZJEUY1WnINag4SbyGpL2UPH+DbrVT18xgdgZQ
    +5S16mexd6NfFel6mZj8AheHDcEdpumCctHSndyTAoGAMxTAgxZCkbhsjQeHEXKI
    QD/AFyt6scRjWPlgjANKQsGSHsEQS1/cYdUVcHbgkOQYmXMUs+O7tV8B579lzz3R
    bReWWqKYPn4T47MbTyShxXO0AoTVHIt0rKlNn75hYuT4UsAxvMvhCw8R1V8CJC75
    VkauVIGz1oHWvC/L4o87hqMCgYEA1LrMfcykE1X61fNZmj8bMO4ss2xkPHEVfR+H
    9xeDz98yZzcPE1hKY4bFjUPPtp9njk9aJ07TEWlY91ZhBGmXNWEnhDPIqWxd8JHJ
    8LumrcOUmLndXwVAjSt3WzHBdZcuLqI5HuJS37jHwtUXTwCpL+5tKkk9fREHPrZ5
    IUnsbF0CgYEA0xabFxRazQV5sJtrdyvNvgUByRbXk39DqkxEHssM6eFJQB5lGbhX
    a4xFvPdyVuSSNug9dwVTo50bbH0Rr5YTu0PXH+1dtyMKkfcSJfi3LqcCNVkaFmip
    hYINHOczNUgFJ7R5F3ZSAdr0CYvVHkN8b0JOWtBcBClG3VyR62ZvEJo=
    -----END RSA PRIVATE KEY-----
    
  server-config.postgres.json: |
    {
      "server": {
        "http_addr": ":4443"
      },
      "trust_service": {
        "type": "remote",
        "hostname": "harbor-harbor-notary-signer",
        "port": "7899",
        "tls_ca_file": "./notary-signer-ca.crt",
        "key_algorithm": "ecdsa"
      },
      "logging": {
        "level": "debug"
      },
      "storage": {
        "backend": "postgres",
        "db_url": "postgres://postgres:changeit@harbor-harbor-database:5432/notaryserver?sslmode=disable"
      },
      "auth": {
          "type": "token",
          "options": {
              "realm": "http://localhost:30003/service/token",
              "service": "harbor-notary",
              "issuer": "harbor-token-issuer",
              "rootcertbundle": "/root.crt"
          }
      }
    }
  signer-config.postgres.json: |
    {
      "server": {
        "grpc_addr": ":7899",
        "tls_cert_file": "./notary-signer.crt",
        "tls_key_file": "./notary-signer.key"
      },
      "logging": {
        "level": "debug"
      },
      "storage": {
        "backend": "postgres",
        "db_url": "postgres://postgres:changeit@harbor-harbor-database:5432/notarysigner?sslmode=disable",
        "default_alias": "defaultalias"
      }
    }


---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: debug
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: "harbor-harbor-redis:6379"
      db: 2
    http:
      addr: :5000
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      token:
        issuer: harbor-token-issuer
        realm: "http://localhost:30003/service/token"
        rootcertbundle: /etc/registry/root.crt
        service: harbor-registry
    validation:
      disabled: true
    notifications:
      endpoints:
        - name: harbor
          disabled: false
          url: http://harbor-harbor-core/service/notifications
          timeout: 3000ms
          threshold: 5
          backoff: 1s
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: debug

---
# Source: harbor/templates/chartmuseum/chartmuseum-pvc.yaml

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-harbor-chartmuseum
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: harbor/templates/registry/registry-pvc.yaml

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: registry
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/chartmuseum/chartmuseum-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-chartmuseum"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 9999
  selector:
    release: harbor
    app: "harbor"
    component: chartmuseum
---
# Source: harbor/templates/clair/clair-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-clair"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: clair
      port: 6060
    - name: health
      port: 6061
  selector:
    release: harbor
    app: "harbor"
    component: clair


---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: core

---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-database"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: harbor
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: jobservice

---
# Source: harbor/templates/nginx/service.yaml

apiVersion: v1
kind: Service
metadata:
  name: harbor
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  type: NodePort
  ports:
    - name: http
      port: 80
      targetPort: 80
      nodePort: 30002
    - name: https
      port: 443
      targetPort: 443
      nodePort: 30003
  selector:
    release: harbor
    app: "harbor"
    component: nginx
---
# Source: harbor/templates/notary/notary-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-notary-server
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 4443
  selector:
    release: harbor
    app: "harbor"
    component: notary-server

---
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-notary-signer
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 7899
  selector:
    release: harbor
    app: "harbor"
    component: notary-signer

---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-portal"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    release: harbor
    app: "harbor"
    component: portal

---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-redis
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: harbor
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: registry
      port: 5000
    - name: controller
      port: 8080
  selector:
    release: harbor
    app: "harbor"
    component: registry
---
# Source: harbor/templates/chartmuseum/chartmuseum-dpl.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-chartmuseum"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: chartmuseum
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: chartmuseum
      annotations:
        checksum/configmap: 7bf295fc9beccb84ff04b030d52dc1f34938d1f6830addd18ebc862d225b1c4f
        checksum/secret: 4e65b2fa8b4ab04c4627cf1b1132453622716fd8e5bcb808adc8a2eadaabfd1a
        checksum/secret-core: 79134f69e41ebb52c7857d80cfe22a528fc0a709caf991ae75cf58874a602c8e
    spec:
      containers:
      - name: chartmuseum
        image: goharbor/chartmuseum-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 9999
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 9999
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "harbor-harbor-chartmuseum"
        - secretRef:
            name: "harbor-harbor-chartmuseum"
        env:
          - name: BASIC_AUTH_PASS
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
        ports:
        - containerPort: 9999
        volumeMounts:
        - name: chartmuseum-data
          mountPath: /chart_storage
          subPath: 
      volumes:
      - name: chartmuseum-data
        persistentVolumeClaim:
          claimName: harbor-harbor-chartmuseum

---
# Source: harbor/templates/clair/clair-dpl.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-clair
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: clair
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: clair
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: clair
      annotations:
        checksum/configmap: 6276aba6568a256b0ae8faf4722952f4528fb91d5a5287ff165c07d3caf8297c
    spec:
      containers:
      - name: clair
        image: goharbor/clair-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 30
          periodSeconds: 10
        args: ["-log-level", "debug"]
        env:
        - name: NO_PROXY
          value: "harbor-harbor-registry,harbor-harbor-core"
        ports:
        - containerPort: 6060
        volumeMounts:
        - name: clair-config
          mountPath: /etc/clair/config.yaml
          subPath: config.yaml
      volumes:
      - name: clair-config
        configMap:
          name: "harbor-harbor-clair"
          items:
            - key: config.yaml
              path: config.yaml


---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: 3fc9138e8f161b288b9121ad3b50b7785a1b49eef3c1f4612b18d26036d72e02
        checksum/secret: c0a05c611117ec7b562d2ec34526b6c8d140d43977943a178372498e2407cbe9
        checksum/secret-jobservice: 1f6dab68fb210f6df8a6b2875dcd238d45065d7521342b4d9bed744ab3f1e516
    spec:
      containers:
      - name: core
        image: goharbor/harbor-core:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "harbor-harbor-core"
        - secretRef:
            name: "harbor-harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-jobservice"
                key: secret
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca/ca.crt
          subPath: ca.crt
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: harbor-harbor-core
      - name: secret-key
        secret:
          secretName: harbor-harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: harbor-harbor-core
      - name: ca-download
        secret:
          secretName: "harbor-harbor-certificate"
          items:
            - key: ca.crt
              path: ca.crt
      - name: psc
        emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: 284bfc91e390437cc5029ed1494432212b26ddb8b6f28e369429a55f92f349e8
        checksum/secret: c2f0002a1571367f6272885e516e3b9ae7e5ed650b12f629dd4cf184c6202faf
        checksum/secret-core: 36807aa69cdbefef5f291e92d98e7008ff4d1f5937ca0e1244ad5b3442f3b834
    spec:
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-jobservice"
                key: secret
          - name: CORE_URL
            value: "http://harbor-harbor-core"
          - name: REGISTRY_CONTROLLER_URL
            value: "http://harbor-harbor-registry:8080"
          - name: LOG_LEVEL
            value: debug
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: 
      volumes:
      - name: jobservice-config
        configMap:
          name: "harbor-harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: harbor-harbor-jobservice

---
# Source: harbor/templates/nginx/deployment.yaml

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: harbor-harbor-nginx
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: nginx
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: nginx
      annotations:
        checksum/configmap: d81fb5417a26de0df044399a046d506300894b27000c96894db9d1aa1257eb36
        checksum/secret: a518a308bead1dde7b653911bad730f15958931d1bccaad93ee939c16bf1a28f
    spec:
      containers:
      - name: nginx
        image: "goharbor/nginx-photon:dev"
        imagePullPolicy: "IfNotPresent"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 80
        - containerPort: 443
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: certificate
          mountPath: /etc/nginx/cert
      volumes:
      - name: config
        configMap:
          name: harbor-harbor-nginx
      - name: certificate
        secret:
          secretName: harbor-harbor-certificate
---
# Source: harbor/templates/notary/notary-server.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-notary-server
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: notary-server
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: notary-server
      annotations:
        checksum/configmap: 6eac0c171a8ab224ff37f4d122d87b3194c42edf39a49d2018fbc1f858674448
        checksum/secret-core: cd097c6cb5d63bea24836c00f95e321ed5d5261f068caea51fc027e60646972a
    spec:
      containers:
      - name: notary-server
        image: goharbor/notary-server-photon:dev
        imagePullPolicy: IfNotPresent
        env:
        - name: MIGRATIONS_PATH
          value: migrations/server/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-harbor-database:5432/notaryserver?sslmode=disable
        volumeMounts:
        - name: notary-config
          mountPath: /etc/notary
        - name: root-certificate
          mountPath: /root.crt
          subPath: tls.crt
      volumes:
      - name: notary-config
        configMap:
          name: "harbor-harbor-notary-server"
      - name: root-certificate
        secret:
          secretName: harbor-harbor-core


---
# Source: harbor/templates/notary/notary-signer.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-notary-signer
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: notary-signer
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: notary-signer
      annotations:
        checksum/configmap: c2af990351ff5a9faa8bbdd734f2daa51201b3853d6449f41996598ea4f1f484
    spec:
      containers:
      - name: notary-signer
        image: goharbor/notary-signer-photon:dev
        imagePullPolicy: IfNotPresent
        env:
        - name: MIGRATIONS_PATH
          value: migrations/signer/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-harbor-database:5432/notarysigner?sslmode=disable
        - name: NOTARY_SIGNER_DEFAULTALIAS
          value: defaultalias
        volumeMounts:
        - name: notary-config
          mountPath: /etc/notary
      volumes:
      - name: notary-config
        configMap:
          name: "harbor-harbor-notary-server"


---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-portal"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: portal
      annotations:
    spec:
      containers:
      - name: portal
        image: goharbor/harbor-portal:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 80

---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: 964165b82470da958a9e8dd35a17886d40d085b1a65367a916cb7f7a9148e6cf
        checksum/secret: e155fb0db5959827ba5de5d0d48a7052c61c349ed479c6f76d9f49b7ea31207e
        checksum/secret-jobservice: 9f8653d35eeaf3f726556345597052a7b381b8fdb4bb2aa54c6dbaf75ac5eb0f
        checksum/secret-core: 8555b03f5293af56508f3197c2c037206330d6eb7845ef2fbc488680005b92c4
    spec:
      containers:
      - name: registry
        image: goharbor/registry-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-harbor-registry"
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-root-certificate
          mountPath: /etc/registry/root.crt
          subPath: tls.crt
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-harbor-registry"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-jobservice
                key: secret
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-root-certificate
        secret:
          secretName: harbor-harbor-core
      - name: registry-config
        configMap:
          name: "harbor-harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: harbor-harbor-registry

---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "harbor-harbor-database"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "harbor-harbor-database"
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: 8accf53dfbf601db7e1b0fb79823d057c19b43014181ecc32c20f049f948b187
    spec:
      initContainers:
      - name: "remove-lost-found"
        image: goharbor/harbor-db:dev
        imagePullPolicy: IfNotPresent
        command: ["rm", "-Rf", "/var/lib/postgresql/data/lost+found"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
      containers:
      - name: database
        image: goharbor/harbor-db:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 60
          periodSeconds: 10
        envFrom:
          - secretRef:
              name: "harbor-harbor-database"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-harbor-redis
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: harbor-harbor-redis
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      containers:
      - name: redis
        image: goharbor/redis-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/ingress/ingress.yaml

---
# Source: harbor/templates/ingress/notary-ingress.yaml
 
---
# Source: harbor/templates/nginx/configmap-http.yaml

    
