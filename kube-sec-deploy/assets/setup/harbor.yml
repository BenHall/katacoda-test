---
# Source: harbor/templates/adminserver/adminserver-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-adminserver"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: adminserver
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="

  CLAIR_DB_PASSWORD: "Y2hhbmdlaXQ="


---
# Source: harbor/templates/core/core-secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "d3Z3ZEFCVkl6VndZckNaaQ=="
  tokenServiceRootCertBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMzRENDQWNTZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFSTVE4d0RRWURWUVFERXdab1lYSmkKYjNJd0hoY05NVGt3TlRBNU1UUXdNalF4V2hjTk1qQXdOVEE0TVRRd01qUXhXakFSTVE4d0RRWURWUVFERXdabwpZWEppYjNJd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNVN0U1WncwT3k1eVZ0Cm1qTzRyYVBGeVhaVjViWVNIUkd6dWdFTllVZW5ScnM3Zmc2MFptS0RMMy8zTk9vZjhlSExBRXVNS0o2UU9JbGEKVXprVWJ2QWgvdzlEV2pwTmpERUtOQmFEUmRVVTB1a3FYQmpBOWFEaE5uVFN1Zmhzb0IzSVpNMVlJNVI1TllZNgpzaU5qNFRWZmNKTTNYRTRGRHhvYXNncm9nNGUyRU5QbUlZbXZxRUY2R0ltMk5HbmNCVHFFOHcxRHduYWh4YkNSCjg3aU11c2MrL1lyaVBBUG1Zd3J2OFBBbzNSZmNGWUE1OFlKNUhJVWppclA2elNoUlNCQkVkcHgwYmdlRTA4bzEKNzhIdVpjM3FVSENQQVlFdnNaYWRrdkxtVW5heVh6VFZxclVENFVYMlVJdjdFNmFKUGp2d2tvbFYwMS9YcXRBTgp2QUNSejdKeEFnTUJBQUdqUHpBOU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGCkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUEKTXJiZzVia0RRMkYrbGZ2SytNTGhMeTIxb2orMlhnV0FKanZZK3FuWXZmSTRUbmNoUkxZQng1Ri9ZUzNoVnZLbgpRbGpsenNrZ0RiMFZSV0Rsc0hWR3ZpUkZRYlFWaU9nOUYzcXRDOGEvOVpkWklsTDBnNWp4RFM3c1oyaVZGY25DCkw3ZndnaVA2SmxmSW84Z1BVTUZsbWFqenBjdkF5ZXlYQ0QxdE1BRHVkSG1oeFppSm10MmVCb2tEczlSaVNYVzQKL3hzbmN2eWxoaS9SS01vNHcwZ1Q0d0lzY0o3WS83bUtEZXF3SmNKTmRIdVhhaFZWa0VYMWZvdGlkWUw3d2lsSQplOGl6eTVFdktqelc5aFdnc1hYWUR0dUNIVVVSemtzVVAzTEFVUzlJYXEvc0wycVJySzVsUkhKdWFqNFd6WmIvCk1CdHg2NTU5cy9lMklYejZSRlR5SEE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tokenServicePrivateKey: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBbE94T1djTkRzdWNsYlpvenVLMmp4Y2wyVmVXMkVoMFJzN29CRFdGSHAwYTdPMzRPCnRHWmlneTkvOXpUcUgvSGh5d0JMakNpZWtEaUpXbE01Rkc3d0lmOFBRMW82VFl3eENqUVdnMFhWRk5McEtsd1kKd1BXZzRUWjAwcm40YktBZHlHVE5XQ09VZVRXR09ySWpZK0UxWDNDVE4xeE9CUThhR3JJSzZJT0h0aERUNWlHSgpyNmhCZWhpSnRqUnAzQVU2aFBNTlE4SjJvY1d3a2ZPNGpMckhQdjJLNGp3RDVtTUs3L0R3S04wWDNCV0FPZkdDCmVSeUZJNHF6K3Mwb1VVZ1FSSGFjZEc0SGhOUEtOZS9CN21YTjZsQndqd0dCTDdHV25aTHk1bEoyc2w4MDFhcTEKQStGRjlsQ0wreE9taVQ0NzhKS0pWZE5mMTZyUURid0FrYyt5Y1FJREFRQUJBb0lCQUROUm0wNWpjNWphL3BMZQphS1JqY2VSZW9HREpZQXl0NThPL2ZVMVhFSkljVmJrU240NmJHYWVMWHRXWmJuVERyY04rdm9uMkZXNHRqV2VLCjlraU1Va1BrMlNXa21pTFBCTGMzYStxZ3plVDNLVkpubWtBa1pPUTNGOXJtS3kyRG43L0d2Tng2cGxkK2tscjMKdUNwYkdVRmlVZGpwL2hqUU0zYXZsQUs4RUxBMFpiNjVreFU3L1VJVkM4Mm9KdnpIV00xd1grSEV6Q1Rkd1NiVgpaNWlZQmFNc0xvWWtHb0doUFFqeCtmWmZ0UU9KYTdoNjZzczR2azBMRC9nWndGU2t1cSsyYlhYSXBuQTJpdTFlCkJiR3Q1NVNPOGNuK3dqTEV4cVB1NzJHNy9LSnAvTHlTV3haQk9LOWYvY1czdGNkbFBNaG91WFNSd2hQdEZYTlYKZ1ZBVmhnRUNnWUVBdzhuU1lkem5xV3NLSnlpUkp3dVhTTlNSM0NWV29aMkVMSWdhaGdnSGhnVnN4bHBhbGRTdwpjYWxyVWR1TzlaTENLUHh6NnJIU2JnOUEzWEdpbDQwUzRZK2ZZSVM3a2tNeGlDazY4OVpZNmRJbGtKOC9xSitxCjBwSGQwL28vNU9EcEJ3MHlNZTBxdk1sa1AwQmlYSnpYUFNuVjhJRkVVY0pnMEZDbDM0a0dTNmtDZ1lFQXdyalcKUVBURTZ5V2NQUHJHcW1qak9icHVwTGRaL2JiNHoxZzNLZFhkempPbWd6WlRnSzlhcHBUTERKSEFvUWFDYWYxNwp2Zm8ycXFXTVY5Q2JBaU9qNmpDY2dNN2tHdFhCSlVJeTZVMXNHRFdvQ1hXQ2FSaFY2cXMvWURUeHEzL3o0RVBQCmtuOSttSlcrNWtoZWRIYlhrN1NnMDUrK2xxM1VHRGZ0NTB2UXJZa0NnWUE4akxJUHFlM0xLMXRjZU9OTEcvNlIKZTR3UWRVdXhkN0ZreEVMUHFMUUs4cXFOUFd3K1lpU2ZRakg2Z3RoWGdpZWgzVkZNQitwNE55ZHNWTFJnQWpVUQpwUVk1SjFPTERGVEpNMWNVQ2ZvOWRjeEFTYis2T29idDBFYTJRL0oycWtmbThtSFBwdlZNcFV2bmM5WDNwbG02CmhMR3hTNGtCY0FmWTVOZ25wWXpZNFFLQmdRQzBFN3dRMWt4R0tzSVNvdGlYUCtqanVrWVlqbmZxNnd1dXRTWk8KeWpvV09DNEZxbmdPeWh4TGNjOVdFSFRVZGZDbGxJYWJhb3FqeGZYRVFHY1owMXdEZUhGRHJoSEZ2MmlmekZqSQo2WkROMHRGVDdoaHNtTlRiOFFMck5ndEpUMHQ2V3p2YmY0elVENmc3enpHTEExemFmSEUvUkx3OUhRVElZUERpCnRucUdBUUtCZ1FDa1ZuVllvTnlxbzllaUJGdVZEdjlHMGtlTjNtOWtrdXNFaHc2RnpKQXJnUk1CQ1dtWC9nTzMKNDFkbStFczN1ckxRY3Qwc2ovZjZqbk1lNVpLd1NXeEpWTi9nSlRmSUFVaHVuRDNOdmNPY3JVNkNUSmcvM1FRbwpQVjR3Mmh5YkRrQ29oaVo2VFBMUDZYVGlud054bEtvZlFzak1DR3cybXlpcGhXVXpUaGJvUWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-database"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secret: "azRGQ05mUWhXbkU3MTZBdA=="
---
# Source: harbor/templates/nginx/secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: harbor-harbor-nginx
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM4ekNDQWR1Z0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFVTVJJd0VBWURWUVFERXdsb1lYSmkKYjNJdFkyRXdIaGNOTVRrd05UQTVNVFF3TWpReFdoY05NakF3TlRBNE1UUXdNalF4V2pBVU1SSXdFQVlEVlFRRApFd2t4TWpjdU1DNHdMakV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRFVnQllsCnJ6V2QzMGI3SHFENTdWZHFjRXhZZlZsVjFGUDdPcW1HUHlPaWFvRm1tNjJwam9rRGNrUkFoQ3ZLVHhScEFqZWQKNHpMRHo3cjBVbkZZSXZ5c0RhYXlLTkFWaW52SDAxVkQxYXMrU2VyWUM0bGVWNXZoUktOQVMrcHpYQVJpOEEwZgpoWENpTTcxTGsycWZ6MGVISkdKVWtkQVI0eFJXbEp4WkV2ODFaN1FXRlVLSjdHWEpEVzVPaUJ1UTBQaTFtZWNXCkpKNWlCL1kvdzJya0FtSERaek03SVRUbitob1hRK25jenM5Y0cvR2VZTVpDbDJ3ZE52aEkyWFJXSzlvWjhDNXMKV0dtT3QzbjExL0N5dGMvWjI4SzZOakNudTZmMVdIUzM0bTVuOFNGQXZUVElDY1g3OUJMOGlxTmpVWHVhRUFnNwpMOE9velgwZlhQaVlXM2pUQWdNQkFBR2pVREJPTUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVCkJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBUEJnTlZIUkVFQ0RBR2h3Ui8KQUFBQk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ3JWbmxQK0NnbWhuUm0vVU4wWmN1YkhqVGNhaEk1c2ZiZApLWk9IQ3YzUnRKL3FEUWRNaitreGlDZjJyMUZGakg0eXpCY0xySnVmL3pheC9CbEpTdHNjSnZJVm5CM1hhS1dZCkdPR3FNS1k0YzB1S21QNnRDOUVrMExLbndDK2xWT2NVa1l0dll1SVhmVXhVb0sza3FHbU5zY1JJUWRrbEg1WGsKU2J0MVd1LytGSDNIMDh5LzJ0eHQ1MVdSNWNTMW9KSXNic01ENUJVRGZGMzFKUEdVU2FaY3F3RFBkang5dlJGRApJbGRQVHlTMmJ4SUJqTklhanErK1NQbDQ2Z3NnMzJabkhmYWF3MnlFYk9VdXhRNlY0NnYvV3lFSDFJdHZTeEJMCkpqQ1hRS2Z5bmRsYWp3b2VpRXBFYkxiayt0OTdtK1hBcjZjRDVPb3pQNTZRQmJYNzYyWXgKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBMUlBV0phODFuZDlHK3g2ZytlMVhhbkJNV0gxWlZkUlQrenFwaGo4am9tcUJacHV0CnFZNkpBM0pFUUlRcnlrOFVhUUkzbmVNeXc4KzY5Rkp4V0NMOHJBMm1zaWpRRllwN3g5TlZROVdyUGtucTJBdUoKWGxlYjRVU2pRRXZxYzF3RVl2QU5INFZ3b2pPOVM1TnFuODlIaHlSaVZKSFFFZU1VVnBTY1dSTC9OV2UwRmhWQwppZXhseVExdVRvZ2JrTkQ0dFpubkZpU2VZZ2YyUDhOcTVBSmh3MmN6T3lFMDUvb2FGMFBwM003UFhCdnhubURHClFwZHNIVGI0U05sMFZpdmFHZkF1YkZocGpyZDU5ZGZ3c3JYUDJkdkN1all3cDd1bjlWaDB0K0p1Wi9FaFFMMDAKeUFuRisvUVMvSXFqWTFGN21oQUlPeS9EcU0xOUgxejRtRnQ0MHdJREFRQUJBb0lCQUNpOXlnRTluMlQrU3VpWQpqYnA5TTdaWGczdXZ4TEg4L0lEOVZVVkUwN3N1K2xKRzVMdk9kUnh4Q3Y3bm1GRzRhYXhjWFhkcStPK3I0eWMyCnF6NS9ycnY1L2d6SVlHVFE0VHlGbXlKZlUrNmtVMTlLanZMRWowRllYSWhXUmNRS1Qxajh0emRrNlJ4Z0dSbmwKVUpzRkxheU9ZRC9nbU9qbEJhQTM2K1gwQzNRY2JTUXVsUkZXUG9JaTVFcWlpSWVBLzhKZ2VkMmgyamNCeHYwcgpwQjNqYWpQOWpQK1loOXUzS25VOFpnTVY4Nkc0VEdjQ0N5M09NYnpKQVplZ0xETXpnU2s4WEJEdGpWTnBGd20zCkk3djg5bldpYlVGMzZtcVN4NTdoVUlBRnJuSWMzZlVxL2orcEtBZFBPWVF1WnJCOU1zUlpkRnFNWWhjdmc5eWUKdU85bldQa0NnWUVBMTBBM3F4K3BOaGc4ZkxTTmJPUEgraTBpaDF1WjEyUkNtbG5QUmZYQVFEdSt6SlRxZmc4VwpVUENkRVJMZWVrQkN2R1N4WFhwRGlxYVdqMXVqY1JRVkRyazVnRXBQaTlWTHZDdzZBOXc4eVhPYjFRUFVvZUNLCmd2MjlQVVhuSE00T1A2UHF4OWZpR295dmkydGpNMDlTY0FuUXZla2ltZHVaNmRQcE5xTUg1U1VDZ1lFQS9McVIKNnNtUTRDN3huWElteWUrR2VRT2tucWwwT2ZIUHYvVFFYSSs3ZE9SdEIvMEpnKzF0Sk9NZFc0OWRONWZ0aWVuKwpRTXFVNGgyalVNK3NZN2pBNlJGdGN4K3pDNkM0RXVUYWQ3bWhGM1h3cDhVNjg0U1FsOGd0UlR0TFJ3TEQrUEN1CnZma0hvS3JxOHNtU1RXZFpUQWxEdk9kMXNJWUsvVUhudkYrTkVKY0NnWUJWbXVTSTJmNmgxT0c1ZHRVSUNVN3UKNENSclVMTE9Sc0YyUVdGOW9VN2tQTjZVM21TajNid3lWSDhpMnk0LzBHNjZIaEdyNjRRUkVFK3drL0ZjZDNBbwpldUd6YzlwTzhuVThVUnFCam9WZVdPd1F1NFZGRzlmNllJOXlYdXFiT2hmUWw1QTRDbE9SMjRHMUlQQkM1N2tSCmRkWGVzV2xoWjBTL0NkZ21NcEJoUVFLQmdHazc0ckNLRitwUmdjZ1dsVEkycTU3T05vamVkSWdBT1lwcmpTdE4KcWpmRk9lVStwdXlwTzI1RnA1N05kbnBFcCtOcWJMVmI1VnkyREtBRXFYcW9ucU10MzQ0MVg5OXluOU0yT2dYcQpaTHFaSUlrclpoMnFVRzd6S202T2Z3emxpT2FxaVlpUEhtNzNYSGVXR1haamwxcEM3VkxHYWtvRHRxVzRBSjkrCmhnV25Bb0dCQUwxYUppQ0ZScitYSEgzZEVqL3VjQzdLNGJPbFJPZm5Hb1gyUDBENkpNakh2K3BvU25BaGNPYU0KM1JpQkF1R2dpM1JsanVLRURGOElBdVo3b04zMXdXMmhFWnhzQ0VpVUZ5WXpNU2V3K0lhTU91NzlmNlZJV2lPdwptM2FyckhqcHNmaXFqL25HYXA4OUhRLzU4SFF4YTNvZkVOQnM0NnBiazNWS1dSZ2M2QmRrCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1VENDQWMyZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFVTVJJd0VBWURWUVFERXdsb1lYSmkKYjNJdFkyRXdIaGNOTVRrd05UQTVNVFF3TWpReFdoY05NakF3TlRBNE1UUXdNalF4V2pBVU1SSXdFQVlEVlFRRApFd2xvWVhKaWIzSXRZMkV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRHZKNFArCjVjeFpmWlNIOVd6VUw5WjVETGF1UzZ1b0N2T3VqekNGdTB0NWp2MmNHRlltMCtiTkdPVXVaQW1LdUxBUjBWYlkKOVVXMFRaMTRzdlhncmthSkI3a1M3US81T3laSGdSRkVTajA4YWtmT0Q0dGpvQzg2VW1oNjR0QXVUc1Nna1NyOApXbU82cXBhZUJSVHUwL0JzSnd1UHcwdXRHZWhqKzdIYjgwdzFqMHRsbk84NkRaQkdsVlM3RnE0SnlkSVVJTm9DCkZZbUxIcm1ETWExTGxySVhDWXFlb1RXUTgvekg5eFpYQXJWUGVuN0FTd2w0UEQ4WjAwRmErRkxKQzlVUVIzUUgKVW1ibmZVQXhWaGQ1c3ZCOHNrcFJrdlM0eDBDcXd0Rm10ZTNkTE8rZWc4YVFvSXMwOFZxRVJBMUhXYXpuL3pHbwpkM0ZCcTNOUHlEMWordHh2QWdNQkFBR2pRakJBTUE0R0ExVWREd0VCL3dRRUF3SUNwREFkQmdOVkhTVUVGakFVCkJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU5CZ2txaGtpRzl3MEIKQVFzRkFBT0NBUUVBWjFTdjNVUmVHanVjdzhObkl2ZHVtdXQwZW84a1EyTDVGbEdybDZ3K015RWtDNHZIeElBQgpnQ1BsdVViQTlTSGJOOWZTOS85UlZZNjNZcGNkZzlmdExsbnZUOUJ5MllEOTdPMDB1MlBKWmxKSWhkUC8vVGJYCjRqRlJkL0ZOMDJvc0lEQnQvQjNMZ3p0ZmJUUWlDV1YrMmhhQkp2aXVYRXJ4RFMwZjN1MzNXTWZZZnZLUUdUQSsKU2hXK2p1MTZobmFiZG9ET1dhRlpDOTBwYkJsUmtqZ0pQc0VheGRldUlJQld6NlJUa3p4V045SnAvTklua1l2SgptNWVVWk12OWxHNkFXZjFVL0xRUmNYQ1F5RWFaNlN0V3FHOVF5VlR0MDcwMWFIMlhnNXcweFNWWFphMTE0QlhMCmNsUUJNMVVMeEJkSHlKS0xpTStKbFJCSnFrNnFoc0tMblE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "bGFKUUg2emt5eU5MQnZXdw=="
---
# Source: harbor/templates/adminserver/adminserver-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-harbor-adminserver"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: adminserver
data:
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "harbor-harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  EXT_ENDPOINT: "http://127.0.0.1:30002"
  CORE_URL: "http://harbor-harbor-core"
  JOBSERVICE_URL: "http://harbor-harbor-jobservice"
  REGISTRY_URL: "http://harbor-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://harbor-harbor-core/service/token"
  WITH_NOTARY: "true"
  NOTARY_URL: "http://harbor-harbor-notary-server:4443"
  LOG_LEVEL: "debug"
  IMAGE_STORE_PATH: "/" # This is a temporary hack.
  CFG_EXPIRATION: "5"
  ADMIRAL_URL: "NA"
  RESET: "false"
  WITH_CLAIR: "true"
  CLAIR_DB_HOST: "harbor-harbor-database"
  CLAIR_DB_PORT: "5432"
  CLAIR_DB_USERNAME: "postgres"
  CLAIR_DB: "postgres"
  CLAIR_URL: "http://harbor-harbor-clair:6060"
  CLAIR_DB_SSLMODE: "disable"
  UAA_ENDPOINT: ""
  UAA_CLIENTID: ""
  UAA_CLIENTSECRET: ""
  UAA_VERIFY_CERT: "True"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  WITH_CHARTMUSEUM: "false"
  CHART_REPOSITORY_URL: "http://harbor-harbor-chartmuseum"
  # The following properties have no default value in Harbor core if not 
  # set via env. They should be removed after the refactoring:
  # AUTH_MODE, SELF_REGISTRATION, PROJECT_CREATION_RESTRICTION 
  AUTH_MODE: "db_auth"	
  SELF_REGISTRATION: "on"
  PROJECT_CREATION_RESTRICTION: "everyone"
  TOKEN_EXPIRATION: "30"
  EMAIL_HOST: "smtp.mydomain.com"
  EMAIL_FROM: "admin <sample_admin@mydomain.com>"
  EMAIL_PORT: "25"
---
# Source: harbor/templates/clair/clair-cm.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-clair
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: clair
data:
  config.yaml: |
    clair:
      database:
        type: pgsql
        options:
          source: "postgres://postgres:changeit@harbor-harbor-database:5432/postgres?sslmode=disable"
          # Number of elements kept in the cache
          # Values unlikely to change (e.g. namespaces) are cached in order to save prevent needless roundtrips to the database.
          cachesize: 16384

      api:
        # API server port
        port: 6060
        healthport: 6061

        # Deadline before an API request will respond with a 503
        timeout: 300s
      updater:
        interval: 12h

      notifier:
        attempts: 3
        renotifyinterval: 2h
        http:
          endpoint: "http://harbor-harbor-core/service/notifications/clair"


---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080

---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "harbor-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
    job_loggers:
      - name: "FILE"
        level: DEBUG
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: DEBUG
    admin_server: "http://harbor-harbor-adminserver"

---
# Source: harbor/templates/nginx/configmap-https.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-nginx
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;

    events {
      worker_connections 1024;
      use epoll;
      multi_accept on;
    }

    http {
      tcp_nodelay on;

      # this is necessary for us to be able to disable request buffering in all cases
      proxy_http_version 1.1;

      upstream core {
        server harbor-harbor-core;
      }

      upstream portal {
        server harbor-harbor-portal;
      }
      upstream notary-server {
        server harbor-harbor-notary-server:4443;
      }
      
      log_format timed_combined 'remote_addr - '
        '"$request" $status $body_bytes_sent '
        '"$http_referer" "$http_user_agent" '
        '$request_time $upstream_response_time $pipe';

      access_log /dev/stdout timed_combined;
      server {
        listen 4443 ssl;
        server_tokens off;
        # ssl
        ssl_certificate /etc/nginx/cert/tls.crt;
        ssl_certificate_key /etc/nginx/cert/tls.key;
      
        # recommendations from https://raymii.org/s/tutorials/strong_ssl_security_on_nginx.html
        ssl_protocols tlsv1.1 tlsv1.2;
        ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:ssl:10m;
      
        # disable any limits to avoid http 413 for large image uploads
        client_max_body_size 0;
      
        # required to avoid http 411: see issue #1486 (https://github.com/docker/docker/issues/1486)
        chunked_transfer_encoding on;

        location /v2/ {
          proxy_pass http://notary-server/v2/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_buffering off;
          proxy_request_buffering off;
        }
      }

      server {
        listen 443 ssl;
    #    server_name harbordomain.com;
        server_tokens off;
        # SSL
        ssl_certificate /etc/nginx/cert/tls.crt;
        ssl_certificate_key /etc/nginx/cert/tls.key;
      
        # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
        ssl_protocols TLSv1.1 TLSv1.2;
        ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
      
        # disable any limits to avoid HTTP 413 for large image uploads
        client_max_body_size 0;
      
        # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)
        chunked_transfer_encoding on;

        location / {
          proxy_pass http://portal/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          
          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;

          # Add Secure flag when serving HTTPS
          proxy_cookie_path / "/; secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /api/ {
          proxy_pass http://core/api/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;
          
          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /c/ {
          proxy_pass http://core/c/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;
          
          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /v1/ {
          return 404;
        }

        location /v2/ {
          proxy_pass http://core/v2/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          
          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /service/ {
          proxy_pass http://core/service/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          
          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_buffering off;
          proxy_request_buffering off;
        }
      
      location /service/notifications {
          return 404;
        }
      }
        server {
          listen 80;
          #server_name harbordomain.com;
          return 301 https://$host$request_uri;
      } 
    }
    
---
# Source: harbor/templates/notary/notary-cm.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-notary-server
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: notary
data:
  
  
  notary-signer-ca.crt: |
    -----BEGIN CERTIFICATE-----
    MIIC8zCCAdugAwIBAgIBATANBgkqhkiG9w0BAQsFADAbMRkwFwYDVQQDExBoYXJi
    b3Itbm90YXJ5LWNhMB4XDTE5MDUwOTE0MDI0MFoXDTIwMDUwODE0MDI0MFowGzEZ
    MBcGA1UEAxMQaGFyYm9yLW5vdGFyeS1jYTCCASIwDQYJKoZIhvcNAQEBBQADggEP
    ADCCAQoCggEBAMyco9cGYFoFtI/tXD0ext2S4IkacbLHyX7oPk+nRzq0BOsOSYC2
    dMI2GmrLCsbCJDZJo3E6mS+ZOwqXTDXgVm1U3kBh6OGRghjqf3ZSJsSOGkgmpS55
    sD0D5v0goti5TAoNdUD7VdA8Ebze29hLBaZaM5cSMS+pGOFO1O19rRWJ5FhBaiXx
    3AYOBntLkRwfBXQYiXPcEMqTOJLsebamwCdNCMYSTmkxPDyHfB/SKXIwZERyaYOF
    /uQBWUkW0AT+zir1Da8iKnO7w4wvxdbqSRSRKxOxxWwId9MKF0U2lLSmBRVGsxeO
    gZgKNUoTf2MtwcawlpDe78ITX36WsXpRYY8CAwEAAaNCMEAwDgYDVR0PAQH/BAQD
    AgKkMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTAD
    AQH/MA0GCSqGSIb3DQEBCwUAA4IBAQCt+bdl/cd9fgQX/n5apP7+V+NK6u2DW+DG
    Gb0fNzUS01DUSDJcx7XrG5jSrsDuESps8/yQtZdQMK7d/fBdWsuJNorkOTJX+Nxa
    qJ6chILhBF/7aRYUiVRXPOmtIscJ/So6HBXXFpxtzqTgE0FySGb+Fgp5dfkUo1yj
    ScIbm3Btb73cdjjqolzTrwGsaKGFiqm02riOqpoo8ch0CjrgxK9AWc7fRT4Yp1RT
    0Pjq7oiLxmiEuqWj2zmb2LaBasu6PCEJCoy4Aw0+f/9ll73vJWnNWFGG0GgVXUfo
    8LVjCbH5tL048aX+UjV8HaJhyUIIfO256BMMV3WIJpPFmroG2h05
    -----END CERTIFICATE-----
    
  notary-signer.crt: |
    -----BEGIN CERTIFICATE-----
    MIIC+zCCAeOgAwIBAgIBATANBgkqhkiG9w0BAQsFADAbMRkwFwYDVQQDExBoYXJi
    b3Itbm90YXJ5LWNhMB4XDTE5MDUwOTE0MDI0MFoXDTIwMDUwODE0MDI0MFowJjEk
    MCIGA1UEAxMbaGFyYm9yLWhhcmJvci1ub3Rhcnktc2lnbmVyMIIBIjANBgkqhkiG
    9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7ygqPSZcqOFsdSiTp7Cv1eSWzsMj8gd9tIrI
    oaqclGcA6xMaS+jrXO60Kg80JeMA4PUUm1mQ5jemsnjnyJTnHWDIx5yvzeNsvInl
    KL83Bcc4SBfX3ojAfa66rW+S+KcOIwaYvryofGu0L2PffC3mEOxo0eOOMHEAL3N8
    f5ZEyox05gZfB9ybNs5aEVcwz4b4dSET04uJ4MvhLuidBHShcPLf4jknI/d7dAnU
    xZNTDkV8md+QvPTd2oTmqahKpo3Bee0HJx4XkXSVer1fiCV4NSjj60A+wZWhA+tX
    xhqHedGN3jaoxPy7wVd1CIgYsGAN1L6RZ/ciyCag2NhqA8oo7QIDAQABoz8wPTAO
    BgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwG
    A1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggEBAAX6fwUFLYKibZqUD6CnF+JP
    rOqQnI7q6A//H5QkeNivTbhcLDz7jqLv69R/GhtJTqh0H/52ZYdAHkI4Ww0jpBqB
    Zkc36dqhFodUkTbkmGPBg888UykyhNa+1M9MTDjem1PfZDc9n/hAMWFtNbAyPVzl
    KFgktCkobWVf4pfWNtfvhZneH/d3y0zyVqrVbuT+qQeavRhxeH3O3aRaDEmNIAED
    IxVEx7ctY2MOqEqf4Y+7Dwth81KoXgsOZyx0xRcyCSykKEFOAiinK0LBrBBBpYry
    TxdAvqrxCvOBlvNwn5a8Cc7CFeYNesQ8eqgi7iftYWJLtRIaTnep4oTwiYCwlN4=
    -----END CERTIFICATE-----
    
  notary-signer.key: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEpAIBAAKCAQEA7ygqPSZcqOFsdSiTp7Cv1eSWzsMj8gd9tIrIoaqclGcA6xMa
    S+jrXO60Kg80JeMA4PUUm1mQ5jemsnjnyJTnHWDIx5yvzeNsvInlKL83Bcc4SBfX
    3ojAfa66rW+S+KcOIwaYvryofGu0L2PffC3mEOxo0eOOMHEAL3N8f5ZEyox05gZf
    B9ybNs5aEVcwz4b4dSET04uJ4MvhLuidBHShcPLf4jknI/d7dAnUxZNTDkV8md+Q
    vPTd2oTmqahKpo3Bee0HJx4XkXSVer1fiCV4NSjj60A+wZWhA+tXxhqHedGN3jao
    xPy7wVd1CIgYsGAN1L6RZ/ciyCag2NhqA8oo7QIDAQABAoIBAQCh07HRMvYcKH01
    QcG4BKzWtRj+y7i0+zCqTAa6rjHJkXFjn8d5eiBZAATVOPh2coaTsgLBo/eScDHS
    LlHYvjks/eKef33OeYeIhF6WFd1rgYSp88hUgoCOCv+yf/8ZViEQvlP5LLtthYul
    TZVZ98znwrCi5bG/QZd4hFLIGqxtyRIiGkWyQjaERuapWRY0+J77m2RtBUIrCIiN
    vr6azUsvyNyH6p0lYe4o/MaVpB3FOUTBjfNyJJxWYfpJBpxn4l1/r2qysB00NcO3
    ZApb5aoxVMJoN4vryTugPDpFodw7QyUZXnW80H+zKtwXx9vaaW79V5rzcgt0ndmt
    +0EaMDABAoGBAPOr9q64HYnaIMrFXzGdp7SQXilrNOF6AUhVsCeg4e/BPZgmSIEO
    StNPinZgiOb/HLng/yEB6SOF0XSZ71vgJ+Rv96F3ViHmN1z0VVIj4+Mnl9mHvNp7
    C69zZEcqYLMcNO/GD3TQzpXQBSouV3iFXn6pLRErkj+VjMI4ySW1e7oBAoGBAPtB
    uab6yHMsXPRmX/qWebjfPY1zp62DuHYbNSGj1hXuK13T78nLjqQVs8bMhQcnm1PV
    b7YTyOY4rZOYc5H4BC4NzEf9prtra9G0fHpWBTW9ELl+qzBBSl2Tk5PNLMFGPFBX
    7vVD+14o9NLd9D6SWslyoMA9Dtg8siX0avGngvbtAoGAMok/qAzXU3fBxUwZ6hhg
    Z7ppTP3HAdxj17StzAo50ZeqRpvp/ZoROrIMbXCn9ACE3KglQZs71vox7pTeZ5ed
    rmrqWLp/SpiMcuLZrydyY/IaNCtKp6VNTx4Hdhr74ym+cNwK6JdFwRxbddwWmBBR
    AMPlbOI0eqtxffZ5ATEacAECgYEA9YOAzNiLHHfCERMkQDHfmTWS6PCVbWijy8zE
    Oy3j2SQUfifFTNM6e721INHiP16FWgLamPl2OvgxLGMwsva95t6WudXyoXrTLWQG
    qmf5yUwI1qke0BVMfGnjL+6yB94Au6VhG4qlSpoMuSwnKSlLy0LWL2K6abPNhGb0
    RVQhFfUCgYBBdZ2oaH90kwjXSr94hMleUA+VnJEOVw3ubjvPhDyDWjpXFtZp2EOy
    Di+SoEW7dKvsv6qCoaadnUjesTTsZnrv0m8Ph57p3JNF5dp6Mdxyxpv0UfJyI8Xr
    FBoBDoqC5KiBibbHnD4WaJRfxcVbgEIPaI7ePmnwTREI0MZo8Mwthw==
    -----END RSA PRIVATE KEY-----
    
  server-config.postgres.json: |
    {
      "server": {
        "http_addr": ":4443"
      },
      "trust_service": {
        "type": "remote",
        "hostname": "harbor-harbor-notary-signer",
        "port": "7899",
        "tls_ca_file": "./notary-signer-ca.crt",
        "key_algorithm": "ecdsa"
      },
      "logging": {
        "level": "debug"
      },
      "storage": {
        "backend": "postgres",
        "db_url": "postgres://postgres:changeit@harbor-harbor-database:5432/notaryserver?sslmode=disable"
      },
      "auth": {
          "type": "token",
          "options": {
              "realm": "http://127.0.0.1:30002/service/token",
              "service": "harbor-notary",
              "issuer": "harbor-token-issuer",
              "rootcertbundle": "/root.crt"
          }
      }
    }
  signer-config.postgres.json: |
    {
      "server": {
        "grpc_addr": ":7899",
        "tls_cert_file": "./notary-signer.crt",
        "tls_key_file": "./notary-signer.key"
      },
      "logging": {
        "level": "debug"
      },
      "storage": {
        "backend": "postgres",
        "db_url": "postgres://postgres:changeit@harbor-harbor-database:5432/notarysigner?sslmode=disable",
        "default_alias": "defaultalias"
      }
    }


---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: debug
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
    redis:
      addr: "harbor-harbor-redis:6379"
      password: 
      db: 2
    http:
      addr: :5000
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      token:
        issuer: harbor-token-issuer
        realm: "http://127.0.0.1:30002/service/token"
        rootcertbundle: /etc/registry/root.crt
        service: harbor-registry
    notifications:
      endpoints:
        - name: harbor
          disabled: false
          url: http://harbor-harbor-core/service/notifications
          timeout: 3000ms
          threshold: 5
          backoff: 1s
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: debug

---
# Source: harbor/templates/adminserver/adminserver-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-adminserver"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: adminserver
---
# Source: harbor/templates/clair/clair-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-clair"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6060
  selector:
    release: harbor
    app: "harbor"
    component: clair


---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: core

---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-database"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: harbor
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: jobservice

---
# Source: harbor/templates/nginx/service.yaml

apiVersion: v1
kind: Service
metadata:
  name: harbor
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  type: NodePort
  ports:
    - name: http
      port: 80
      targetPort: 80
      nodePort: 30002
    - name: https
      port: 443
      targetPort: 443
      nodePort: 30003
    - name: notary
      port: 4443
      targetPort: 4443
      nodePort: 30004
  selector:
    release: harbor
    app: "harbor"
    component: nginx
---
# Source: harbor/templates/notary/notary-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-notary-server
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 4443
  selector:
    release: harbor
    app: "harbor"
    component: notary-server

---
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-notary-signer
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 7899
  selector:
    release: harbor
    app: "harbor"
    component: notary-signer

---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-portal"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    release: harbor
    app: "harbor"
    component: portal

---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-redis
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: harbor
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: registry
      port: 5000
    - name: controller
      port: 8080
  selector:
    release: harbor
    app: "harbor"
    component: registry
---
# Source: harbor/templates/adminserver/adminserver-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-adminserver"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: adminserver
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: adminserver
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: adminserver
      annotations:
        checksum/configmap: 9d482423b63d0c92376e2dee27902109172675a6ab383613391b80b4be40b3eb
        checksum/secret: 1ec1bce946a4884b14334d24464b9fbba2652bfabf3da1dcca8901d1a86313ba
        checksum/secret-core: c9b1c5401d4f99b8730a7d5405031c1b123d08257ada55d0c305599d2aa5932a
        checksum/secret-jobservice: a76f4a162de5fc96741b26cb9fc1e7c9398b777390885ced0c2c89891e8e3c37
    spec:
      containers:
      - name: adminserver
        image: "goharbor/harbor-adminserver:v1.7.0"
        imagePullPolicy: "IfNotPresent"
        livenessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        envFrom:
        - configMapRef:
            name: "harbor-harbor-adminserver"
        - secretRef:
            name: "harbor-harbor-adminserver"
        env:
          - name: PORT
            value: "8080"
          - name: JSON_CFG_STORE_PATH
            value: /etc/adminserver/config/config.json
          - name: KEY_PATH
            value: /etc/adminserver/key
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-core"
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-jobservice"
                key: secret
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: adminserver-key
          mountPath: /etc/adminserver/key
          subPath: key
      volumes:
      - name: adminserver-key
        secret:
          secretName: "harbor-harbor-adminserver"
          items:
          - key: secretKey
            path: key
---
# Source: harbor/templates/clair/clair-dpl.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-clair
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: clair
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: clair
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: clair
      annotations:
        checksum/configmap: 6276aba6568a256b0ae8faf4722952f4528fb91d5a5287ff165c07d3caf8297c
    spec:
      containers:
      - name: clair
        image: goharbor/clair-photon:v2.0.7-v1.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 30
          periodSeconds: 10
        args: ["-log-level", "debug"]
        env:
        - name: NO_PROXY
          value: "harbor-harbor-registry,harbor-harbor-core"
        resources:
          null
          
        ports:
        - containerPort: 6060
        volumeMounts:
        - name: clair-config
          mountPath: /etc/clair/config.yaml
          subPath: config.yaml
      volumes:
      - name: clair-config
        configMap:
          name: "harbor-harbor-clair"
          items:
            - key: config.yaml
              path: config.yaml


---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: 3b4121f192f68cd8015d18f223b9af3894de6aac6381660f1bc1b69db3239ba6
        checksum/secret: 8eec5159012b0e299f54aca13b7a79e84f64b8d02ed03d2994205c5a1a660bf0
    spec:
      containers:
      - name: core
        image: goharbor/harbor-core:v1.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-jobservice"
                key: secret
          - name: _REDIS_URL
            value: harbor-harbor-redis:6379,100,
          - name: _REDIS_URL_REG
            value: redis://harbor-harbor-redis:6379/2
          - name: LOG_LEVEL
            value: debug
          - name: CONFIG_PATH
            value: /etc/core/app.conf
          - name: SYNC_REGISTRY
            value: "false"
          - name: ADMINSERVER_URL
            value: "http://harbor-harbor-adminserver"
          - name: CHART_CACHE_DRIVER
            value: "redis"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tokenServicePrivateKey
        - name: ca-download
          mountPath: /etc/core/ca/ca.crt
          subPath: ca.crt
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: harbor-harbor-core
      - name: secret-key
        secret:
          secretName: harbor-harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: harbor-harbor-core
      - name: ca-download
        secret:
          secretName: harbor-harbor-nginx
          items:
            - key: ca.crt
              path: ca.crt
      - name: psc
        emptyDir: {}

---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: 65a06469e8f69f18602f9d9083d4706b2e9c84b0ee71cec263f6068be30ae03d
        checksum/secret: 95b3655b5947cc8b22609c77c709874245675f4cd3ec61a17b21801e7c271ef6
    spec:
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:v1.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        resources:
          null
          
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-jobservice"
                key: secret
          - name: ADMINSERVER_URL
            value: "http://harbor-harbor-adminserver"
          - name: REGISTRY_CONTROLLER_URL
            value: "http://harbor-harbor-registry:8080"
          - name: LOG_LEVEL
            value: debug
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: 
      volumes:
      - name: jobservice-config
        configMap:
          name: "harbor-harbor-jobservice"
      - name: job-logs
        emptyDir: {}

---
# Source: harbor/templates/nginx/deployment.yaml

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: harbor-harbor-nginx
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: nginx
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: nginx
      annotations:
        checksum/configmap: 473f335c4b3cf8c64a267f23624a3d579bc8ead35407ff6821e5db4c86cc6e03
        checksum/secret: 3c16cbbba33b42714f7a577117e097aac7b542f2a1b3a22c06fb85581f76eb0f
    spec:
      containers:
      - name: nginx
        image: "goharbor/nginx-photon:v1.7.0"
        imagePullPolicy: "IfNotPresent"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        ports:
        - containerPort: 80
        - containerPort: 443
        - containerPort: 4443
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: certificate
          mountPath: /etc/nginx/cert
      volumes:
      - name: config
        configMap:
          name: harbor-harbor-nginx
      - name: certificate
        secret:
          secretName: harbor-harbor-nginx
---
# Source: harbor/templates/notary/notary-server.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-notary-server
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: notary-server
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: notary-server
      annotations:
        checksum/configmap: 4133c10266ecb9cb97d750f5690f082f6fa460b67bc2aff7a38f789b12d239a2
    spec:
      containers:
      - name: notary-server
        image: goharbor/notary-server-photon:v0.6.1-v1.7.0
        imagePullPolicy: IfNotPresent
        resources:
          null
          
        env:
        - name: MIGRATIONS_PATH
          value: migrations/server/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-harbor-database:5432/notaryserver?sslmode=disable
        volumeMounts:
        - name: notary-config
          mountPath: /etc/notary
        - name: root-certificate
          mountPath: /root.crt
          subPath: tokenServiceRootCertBundle
      volumes:
      - name: notary-config
        configMap:
          name: "harbor-harbor-notary-server"
      - name: root-certificate
        secret:
          secretName: harbor-harbor-core


---
# Source: harbor/templates/notary/notary-signer.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-notary-signer
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: notary-signer
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: notary-signer
      annotations:
        checksum/configmap: f7d19a9ecd14ee6b11526f93a70176eefd49f94baef35caba21eb83c4f73d881
    spec:
      containers:
      - name: notary-signer
        image: goharbor/notary-signer-photon:v0.6.1-v1.7.0
        imagePullPolicy: IfNotPresent
        resources:
          null
          
        env:
        - name: MIGRATIONS_PATH
          value: migrations/signer/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-harbor-database:5432/notarysigner?sslmode=disable
        - name: NOTARY_SIGNER_DEFAULTALIAS
          value: defaultalias
        volumeMounts:
        - name: notary-config
          mountPath: /etc/notary
      volumes:
      - name: notary-config
        configMap:
          name: "harbor-harbor-notary-server"


---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-portal"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: portal
      annotations:
    spec:
      containers:
      - name: portal
        image: goharbor/harbor-portal:v1.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 80

---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: 38d2d789c3f376c9af631ad9b4aadc0a946b2a6456d254023277e1b672eebb6d
        checksum/secret: 86d8d981242606b4e5bd55b14da9b94beb977e37ce781a9d0292272026003651
    spec:
      containers:
      - name: registry
        image: goharbor/registry-photon:v2.6.2-v1.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-harbor-registry"
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-root-certificate
          mountPath: /etc/registry/root.crt
          subPath: tokenServiceRootCertBundle
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:v1.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-harbor-registry"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-jobservice"
                key: secret
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-root-certificate
        secret:
          secretName: harbor-harbor-core
      - name: registry-config
        configMap:
          name: "harbor-harbor-registry"
      - name: registry-data
        emptyDir: {}

---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "harbor-harbor-database"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "harbor-harbor-database"
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: 8accf53dfbf601db7e1b0fb79823d057c19b43014181ecc32c20f049f948b187
    spec:
      initContainers:
      - name: "remove-lost-found"
        image: goharbor/harbor-db:v1.7.0
        command: ["rm", "-Rf", "/var/lib/postgresql/data/lost+found"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
      containers:
      - name: database
        image: goharbor/harbor-db:v1.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        envFrom:
          - secretRef:
              name: "harbor-harbor-database"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
      volumes:
      - name: "database-data"
        emptyDir: {}
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-harbor-redis
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: harbor-harbor-redis
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      containers:
      - name: redis
        image: goharbor/redis-photon:v1.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath: 
      volumes:
      - name: data
        emptyDir: {}
---
# Source: harbor/templates/chartmuseum/chartmuseum-cm.yaml

---
# Source: harbor/templates/chartmuseum/chartmuseum-dpl.yaml


---
# Source: harbor/templates/chartmuseum/chartmuseum-pvc.yaml

---
# Source: harbor/templates/chartmuseum/chartmuseum-secret.yaml

---
# Source: harbor/templates/chartmuseum/chartmuseum-svc.yaml

---
# Source: harbor/templates/ingress/ingress.yaml

---
# Source: harbor/templates/ingress/secret.yaml

---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml

---
# Source: harbor/templates/nginx/configmap-http.yaml

    
---
# Source: harbor/templates/registry/registry-pvc.yaml

