---
# Source: harbor/templates/adminserver/adminserver-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-adminserver"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: adminserver
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="

  CLAIR_DB_PASSWORD: "Y2hhbmdlaXQ="


---
# Source: harbor/templates/core/core-secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "RHlaVG5yemRRaVFRV05MSg=="
  tokenServiceRootCertBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMzRENDQWNTZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFSTVE4d0RRWURWUVFERXdab1lYSmkKYjNJd0hoY05NVGt3TlRBNU1UTTFOREUxV2hjTk1qQXdOVEE0TVRNMU5ERTFXakFSTVE4d0RRWURWUVFERXdabwpZWEppYjNJd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUM3NkJ6RmxKNjNub0pICkQzdGMrQWM2blpZaldzaVZzMmpjNENWcnI4NGZWSWs2R0F4ZzlFSnhicysyYUhiaDBBcHpyK0JMTkE1T0RSWksKWTBna1dmVWQwYXNBL0JYN2l1dTdUU0hIQ2NFVUdiUVRUWkRkeHZlMGJWR1cyMEZ5SWFsRW1MNHRiVHpveEszagpXZVJFcGVpdVFhSE1WbTZnNG9iVDdkMUUrTjl3YXhjZHpCVDEvN2EzZDNSdHBWQWF3VU5HaWllTGljNm9NdzB3Ck5hc2o3Z2xZclRYbC9RVEh5NnN3UHBMdHhTM3ZFL0RrRVI0eWR6U3E4VmkrSnNNL1FnMWZYZ2pUSkVjREs4Yk8KdVA2ZWJ6Y3ZHdTRlejNFRkh3MzRWNW9WY3J4RlR0Y3dNSlhRaWlENVBjVmZYc0U5WjZuMS9IMEdVdEcwT0d4cQpVRVRPUWd5VEFnTUJBQUdqUHpBOU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGCkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUEKaDNNTi9BdzJ2K2o1MUltcGVoSUlvcWE4Y0tnNk1wSkZZSFN5Q3FWQkZibWNDby8vVG4rbDZwU2FVcFhESm81TAphVW9zZUtxcUdYOTdzZTM1VkQ1MjltWEdvcXN1Z2w1S0hPc0F3QXdjWDRoa0UrS2NKSW5XbGlqUlI4cTVYelhECkRGZGVXOVRWbEFBY1d2Q1Zma0FZU2dESmE5Y2Nac01Zc0RBOU1xaHI5Z0ZwZ2t2TDR6dVA3bSs1QnBaaHcyalIKc1c3SkdHUFRuNXNFLzFCYWd3VUpoYzRiUjNsa0xxSUxtNEJ6blk3ZHNXem84eTZGQ2FPOWxKS3FVRTZJNFZRawpGWCtzN3gyVUdNNDFud2R6cFAxd2czSldHY0NubVk3WHk2ZG5iYVpQRXdFTTc2ci9KNGQ1VkRaZnl5ZXhYdUxOCitnTmVaV2xDcDErOTM2SGNpcWxmSGc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tokenServicePrivateKey: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdStnY3haU2V0NTZDUnc5N1hQZ0hPcDJXSTFySWxiTm8zT0FsYTYvT0gxU0pPaGdNCllQUkNjVzdQdG1oMjRkQUtjNi9nU3pRT1RnMFdTbU5JSkZuMUhkR3JBUHdWKzRycnUwMGh4d25CRkJtMEUwMlEKM2NiM3RHMVJsdHRCY2lHcFJKaStMVzA4Nk1TdDQxbmtSS1hvcmtHaHpGWnVvT0tHMCszZFJQamZjR3NYSGN3VQo5ZisydDNkMGJhVlFHc0ZEUm9vbmk0bk9xRE1OTURXckkrNEpXSzAxNWYwRXg4dXJNRDZTN2NVdDd4UHc1QkVlCk1uYzBxdkZZdmliRFAwSU5YMTRJMHlSSEF5dkd6cmorbm04M0x4cnVIczl4QlI4TitGZWFGWEs4UlU3WE1EQ1YKMElvZytUM0ZYMTdCUFdlcDlmeDlCbExSdERoc2FsQkV6a0lNa3dJREFRQUJBb0lCQURER0Qrbk5LT0Y2ZUZCZgptV0xKVW44SmRuWVkwMlhnR3NEeVFXUlJUc3hkRWYyTlRuRkFGWnNCNjFKcWpTa1I2aFNiT3pucCtpaVNSdzNwCjlValNQTWlQcXJabnVJRUJUeXpmMlh1amNZVjVJbis4SzNVVmR5aFRFOUYzZWVaWkRHbXN4L2hjbVduRjIyamUKNVZ4WVFDd3pCdjlXRkFNWXFXeUxHbHNUeWxPUVZjQ1RLWEdhOXFwWnh1NU5KWGhuVEpBbmpubWpWQksrdUxxLwo5Mml0ZGFreU1CeWRIZ055Z3JyRVJ3NFk1SWRvTWh0SldnT0ZMdzB4ZVZyRC9rV0xBM3cyUkhlY0VzTjlYcS9LCjBDakpPSWd2ckZLbG5MQ2piSlVOTDRLdk9QcGhhTER1TThMMEIxUVVxZnpkemJibVI2WkpvVm1DMUk1dlBGRHAKc0VkMGNRa0NnWUVBd1k0djkvTXp3MGxSS29GUXJramE1M0ZNSTZOaTRsSEp4MWg0MUhDYUd3WVIrU0VCeXNOdgpENUVicDh4WVJjejZjazRBU0MrSlEzR0NicXB4UVNhcnRSNStrdEw3aEhISnllTy84VDV2ZVAzYVB2clNXV2ZrCkFaTU04Vk1xRENxMFBocnA0ZW16ZDFIK1I1eTBDc3NXaWNDTDZOUGVFMldJZWkwNmdQcWVpcmNDZ1lFQStJZGsKOFc2cGt5QmVoZUNtdmt5d1ZUL3NaUVFDeDVZcGlHWFNGZWw1K0U0dktrNmxualNTTmNmQTkzY1Y2ZU94OXM1YgpoU083eG10SWNNN1BId1VVVWZsNzF6L3AvKzM2VCtrLzd5VzgvdFpPMW5Hb2I2SHNtL2pLalkxWVk2RmtpbVBkCk5wbkdldzlJVHhtck0xZm41UE96ZmhwWVBVbWVidEFONkF3MllRVUNnWUVBdXBna3psaDdNbXpmL3FZajdhRDIKeCtDRmttWFUwbkllb0RzK1lTOGNvYWk4Y3Z2TENucFYreC9kRldyK1BteFpsUkIxWFNIV3Bsb3JjQnlJaWxLSgpmbFlqbDlBbUFZemhCK3kwQWhJNnpOMk5KT0lSSDNmMGEwQWtYaEhhbTFnZjR5OTNBZitXc0JVdm1rSUxuOHdoCnNqTVpyaDl5SENqcDVUN3RBNktZYlFrQ2dZQkQwNy9LM0diUFRvQTlqV2cwZTMyTVpwdS9uZTZjUmZFajFwWVYKZ05qVzJZK3B2amtaQ2tQMUJZVTJoSHVvajRuY1Q4bE9kc2dpaU5rR1lJcktibnB6UE9GOWgyWDNnUjFWZmRVRApFWXVaQ1NnUEFvbnpuWCtUdWJ5ZUVUdFVSWkhJNnlST2FIMXd6R1R4b1pIRnUzSUFYRHBhYWhvMjc4YWJlNUN3CkNkVTFlUUtCZ0hVeWV1ZlFsL1dpZmpXMHhRWjBVajRQZVROTENueHdjVWJXSHY5SkczemZwN2pUSStGZXk2MDYKbEVVUVF3N1k1U0d6MG9pYXp0SHArN0c3SVBpTWNYNXhIR3lYWXVrdXBVMDVhZmdibVFjZ1kyNnhYdWR5YnFldgpqa1NQNFU4SCszVUlabFBiM3hlcUlGQ1d0dHo5MmZqazd4WEZsSm9vK2Q5ajdvNmZscExWCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-database"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/ingress/secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-ingress"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJRENDQWdpZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFVTVJJd0VBWURWUVFERXdsb1lYSmkKYjNJdFkyRXdIaGNOTVRrd05UQTVNVE0xTkRFMVdoY05NakF3TlRBNE1UTTFOREUxV2pBZE1Sc3dHUVlEVlFRRApFeEpqYjNKbExtaGhjbUp2Y2k1a2IyMWhhVzR3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUURCV0VFNVJMTHpLRkV3U2xaU04vUmw3SjBJMEljL1BJQkJUbDh2WnUvU2xybzFGVkFxT3ZCSjJmMisKcUFJb2pjdjZrbVFBd2hIT2tQNE5GRlVPN3l5UXNJNUZuYlQyWmVqT2VTSndxMUdONDl5TmNaMDJnV3B1Q29zMQpkdnFYbmRwZHhQUkVmUlhsVWhqSnpodW50KzN3QXJmTlpGdWZuZWQvdzJlUlVIZEE0R3J0YlFnSXNtcEZPaWwzCmJraEkyYlJ6TGhWL2VXdTRzM09RaWlWelp1ajBVa2p0bHFzc0hvSDlLRDg1RDJBS0h0L0ZyM0txV04yUmZaYmsKdU45eE54OHZudGlsdlcvSjFDaVVleGZ0a09qRmtIU3cwbFhXcWMxUnRDZUdjRmh2NldlbkNQZDJ0UDFsS3BMTApncjJHVWtWL2tPdTZpckNZWkMxenpyOFJ4OVZkQWdNQkFBR2pkREJ5TUE0R0ExVWREd0VCL3dRRUF3SUZvREFkCkJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBekJnTlYKSFJFRUxEQXFnaEpqYjNKbExtaGhjbUp2Y2k1a2IyMWhhVzZDRkc1dmRHRnllUzVvWVhKaWIzSXVaRzl0WVdsdQpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNoNkh3VjJmV1NDd085dTdOMmQ3VXBqS2MwOUJEYVhZbTc0bi9kClY5UkhVVFBDanJLQ1cxM2kxQUVqZXBFTlk0Qmsvcy9XZ3RKRmtWbVdBTEpsSFRmbmIrRXI3c1ltRkF6RjlXVkQKTEJoS0hzQlFON3ZPRThYR3dnL0pUNlo2cURXOTh6RExTK0hYS0ZjM2l4Kzl0TGwyRTlUZ2wxeTVjakd0dno0MwpUNUhTSWRUakJtKzNGcitvRVEyTWdJRzBDN2EzYXlXMm5CRE1rKzlkUDZQVjB3akxKY1QvMmd4aFhzT1FhUFN0CkplLzAvSEJvZmxDcmwxOFZ3REY0VStxS1JTbDBlSXJaUmU3WUl1Y0RlMmFaTklEVUo4ZlkxV1hwTVYvVjMySzcKMldaNXpNQkpIa2hCOFhzSVlSb3EzSjhLM2JoTy9HQ1VkSFhvTTVEMjhzV2gzYnI4Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBd1ZoQk9VU3k4eWhSTUVwV1VqZjBaZXlkQ05DSFB6eUFRVTVmTDJidjBwYTZOUlZRCktqcndTZG45dnFnQ0tJM0wrcEprQU1JUnpwRCtEUlJWRHU4c2tMQ09SWjIwOW1Yb3pua2ljS3RSamVQY2pYR2QKTm9GcWJncUxOWGI2bDUzYVhjVDBSSDBWNVZJWXljNGJwN2Z0OEFLM3pXUmJuNTNuZjhObmtWQjNRT0JxN1cwSQpDTEpxUlRvcGQyNUlTTm0wY3k0VmYzbHJ1TE56a0lvbGMyYm85RkpJN1phckxCNkIvU2cvT1E5Z0NoN2Z4YTl5CnFsamRrWDJXNUxqZmNUY2ZMNTdZcGIxdnlkUW9sSHNYN1pEb3haQjBzTkpWMXFuTlViUW5obkJZYitsbnB3ajMKZHJUOVpTcVN5NEs5aGxKRmY1RHJ1b3F3bUdRdGM4Ni9FY2ZWWFFJREFRQUJBb0lCQUhGKzVETEE4Q2NxNkpYbgpYVXJBUy9nMDhHM0hNMDFjcjVFbWQxdTFHbHpOWEJ0akduN2Z3RVFwOGZra1dMZ0RuTlRIY0dxOWdZUjN1cHBrCjhCVm5Nd3J3aVdPMlV3ODgvVytPempmRGFZbFlWQlMzdCtqU0NXNzFRNGlzQWloVVltWWZBcURkcUtmSURJTVMKT1V1My9iV2hjdEhmOHFUOUpYTHJldlZqZmMyWHFQMCttMjVkaTg4b3FZNWpWT3AvY3JHSGQvZngxNXhkajYvKwp2eE5qT0NsU0ZKaEw1UDgwVVJzUkgvWU15L0thTTVod3FQaEdJTUROTFVQdzRMT0lRUWJpeDROaExIazJDcmkxCnpEZkhRMDl3WFdCOVROaHN5TGZGeDgxWlJ5alM1KzVXYnRheWpjYTdxdFBoNWpkOHoxYWJrWE83ZU5EMThTL08KaUhYNlc0VUNnWUVBOC84WHpkQWVTU0xyczN5UWNUSU0yUmRMbEhwbWFvQXg5MHByS3NLdURQRnBHci9qVk80WgpNMDg1Wk9KWG9HZGI4dXNPTGdpOUl3ZmFqT3oxZSt3a29wMHVYSG5yS0ZYOFdJUVhNVFJkWUEzYi9LQ1ZWTDNhCmM5VVVGV003c1M0K2lBem96dWVrNFFUZWJpRTB2TmdIMzZaS1FFaWFlRDlrY29BUU5RNi8zRnNDZ1lFQXl0dEEKT25sYjU5SnE3OUI0N0x5aGxRLzRnYlBWRnNDN2wwc256VzdnRG42UzdWWDlURlZReVNUT0ZpeHh0OVBiT0E2dgpjaUNxZzdUSER2MjN5dVkyZ01HMm1YTUdjWkp6SE50bDZVN2pWQk93dkxSRGl4Vm54N1M3UnRiVzlOOVF5QnFYCm91ZXovY2k5eWhOa2FFRGZiR2c3ZTdzMXhrYVRHbjJRamtFQklxY0NnWUVBN0N5akVlaTlKL1hSU0M3dWNXTU0KNUtXVDF1aVRjY3Nja2sxS1psMkNzNnlKSEFkWk9NQXZUR2NIR3d1cjNldXVLUGcxQllJWDhXeU1zNVE2R2ZWOQprSm1zWW43d2pGNk9uKzliczVrSU9RMnhQbHNCc01FRVR0S1ZXZzV2blJVeUdlYkZBbUZlU3lDM1hNcHZqY3RkCjg3RzJkWHJSYWt1U0l2S3F2WERGYmJrQ2dZQkRXb2o0NFZLaXBqcmJaVnpCUGVCb25lVGxLOUNVdldtTDBtaGsKeld1WFpHOWtYaWk4TDVlak1aVTd4NFg2ZzExR1A1b0JTdGRTNDdNMFJ3bS9WTERFRDQyUlpaKytGZUlpc3JZagp3UTI1M00vUjJBaVZKWVpQeUxKbDB1K01YcGx6MTJDQnRtME0xcG90ZmtMWVdySFVUTWR6VGJXTkgrRzM2ZmtWClFvQWVBUUtCZ1FEZFhjM0E3UXl3eGV5YVkzSFlwd3N2NjVrNHBncU5HMWswNTZ2UkVoRjErckhYZ1paaG5vOHEKZE5XaTdzNjBhamJIM2dhWHdRVFZNQzYrWllTT3RPZlRxZFMvRy92MWtObldmYzhZK3hlOXp1SW5tNzRadmxnTgpsejhIUnlmNmwxUDJ6bXFXTzlBNFFBdVQ3RGlHWHZzZXpzQllDczZPcEtsRGsvYUF0QWdFbWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1VENDQWMyZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFVTVJJd0VBWURWUVFERXdsb1lYSmkKYjNJdFkyRXdIaGNOTVRrd05UQTVNVE0xTkRFMVdoY05NakF3TlRBNE1UTTFOREUxV2pBVU1SSXdFQVlEVlFRRApFd2xvWVhKaWIzSXRZMkV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRFB3TWVoCmFVVEsxSFNXUCtodURMZXhqMXFSOTQ3NzFzbDhlMDMyWkZrUnRGL09UcUFWcUtNakN0Rk4vSTNnRUtGOUxVaWEKOWZpS3NZZFF6ZVJScm5BaWU3alYyeW9PVld0REtaN2hJdWlUT0JyUnVOL2NZVmN0Sy80VGpBckxQNisrVHVEdAozTnBnKythWFNPOGNKUWI2VUhiSlF4VzVLWVR6MzE1NEIxUEZUclF6TENGU3JFZTBvZUpKTnlMQzZjZzcxcnNNClRNQ1poZzN5akQwaTNRQWJMaFo1NFM4Zk5DbHhpNGEvNVhxQ3FJS2hpOWdzaVIxQVI4OUNMcWVUeTNzWmpUUEEKZ3ZKZnJBbHpPdXA4UzB6TGpLK2tXY1VBUUMrbkx0bHF2NC9ZYmIxYkRYeGFLaFZ0dTlCSEljVE9ZMGNlaTE1NQp3alYvQzdPeUpEM2tMTXY3QWdNQkFBR2pRakJBTUE0R0ExVWREd0VCL3dRRUF3SUNwREFkQmdOVkhTVUVGakFVCkJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU5CZ2txaGtpRzl3MEIKQVFzRkFBT0NBUUVBY2dlcXVSV0llamVObHdobDhDN2o5ZVl6YmN3VCsvZEJobjY4ZzdHNVdUSUIwYXZXcFdMOAo0WUwxbUczTndIYUFnSHQzTGxPMWNWWlNjT3pqMDdNQldzUzROa0JqZW9BbzJxZ0Q2eTZIMi9ZUVpMQjc4UUl0CjZaU1ZScmJXYW82QWVUVlBOSXlGdGpRRkhVQWRGQmtaTHovcm42K1VKUitwVWhmYytWWXBTVit6V1lhWTJaWTcKMm9DZHFkeHQyMzd5dGRsYWZOZ3pYd3JxeTVkR0w0TmdoWUZxYXlKR0toT2xBZkJ2U05KK2N3K1IwbmtzWkRDMgpXcmFKRUVIWWxlYjlzL3hRcDVEdHlURG8xRjNrYXZTOEFFNGxaQmlRd3RwZWpPRjFCQmg0d2w2RWtSdlNJWTZlCld3Tm1tSlJYYjdjMzZxVitZUHhmRHRaRys4Kzg2THo2a2c9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secret: "VXJzSDdwSGJRSmE2SjJHOQ=="
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "N3AzcFJmRG9pUGtwUEVGeA=="
---
# Source: harbor/templates/adminserver/adminserver-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-harbor-adminserver"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: adminserver
data:
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "harbor-harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  EXT_ENDPOINT: "http://127.0.0.1:30002"
  CORE_URL: "http://harbor-harbor-core"
  JOBSERVICE_URL: "http://harbor-harbor-jobservice"
  REGISTRY_URL: "http://harbor-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://harbor-harbor-core/service/token"
  WITH_NOTARY: "true"
  NOTARY_URL: "http://harbor-harbor-notary-server:4443"
  LOG_LEVEL: "debug"
  IMAGE_STORE_PATH: "/" # This is a temporary hack.
  CFG_EXPIRATION: "5"
  ADMIRAL_URL: "NA"
  RESET: "false"
  WITH_CLAIR: "true"
  CLAIR_DB_HOST: "harbor-harbor-database"
  CLAIR_DB_PORT: "5432"
  CLAIR_DB_USERNAME: "postgres"
  CLAIR_DB: "postgres"
  CLAIR_URL: "http://harbor-harbor-clair:6060"
  CLAIR_DB_SSLMODE: "disable"
  UAA_ENDPOINT: ""
  UAA_CLIENTID: ""
  UAA_CLIENTSECRET: ""
  UAA_VERIFY_CERT: "True"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  WITH_CHARTMUSEUM: "false"
  CHART_REPOSITORY_URL: "http://harbor-harbor-chartmuseum"
  # The following properties have no default value in Harbor core if not 
  # set via env. They should be removed after the refactoring:
  # AUTH_MODE, SELF_REGISTRATION, PROJECT_CREATION_RESTRICTION 
  AUTH_MODE: "db_auth"	
  SELF_REGISTRATION: "on"
  PROJECT_CREATION_RESTRICTION: "everyone"
  TOKEN_EXPIRATION: "30"
  EMAIL_HOST: "smtp.mydomain.com"
  EMAIL_FROM: "admin <sample_admin@mydomain.com>"
  EMAIL_PORT: "25"
---
# Source: harbor/templates/clair/clair-cm.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-clair
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: clair
data:
  config.yaml: |
    clair:
      database:
        type: pgsql
        options:
          source: "postgres://postgres:changeit@harbor-harbor-database:5432/postgres?sslmode=disable"
          # Number of elements kept in the cache
          # Values unlikely to change (e.g. namespaces) are cached in order to save prevent needless roundtrips to the database.
          cachesize: 16384

      api:
        # API server port
        port: 6060
        healthport: 6061

        # Deadline before an API request will respond with a 503
        timeout: 300s
      updater:
        interval: 12h

      notifier:
        attempts: 3
        renotifyinterval: 2h
        http:
          endpoint: "http://harbor-harbor-core/service/notifications/clair"


---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080

---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "harbor-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
    job_loggers:
      - name: "FILE"
        level: DEBUG
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: DEBUG
    admin_server: "http://harbor-harbor-adminserver"

---
# Source: harbor/templates/notary/notary-cm.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-notary-server
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: notary
data:
  
  
  notary-signer-ca.crt: |
    -----BEGIN CERTIFICATE-----
    MIIC8zCCAdugAwIBAgIBATANBgkqhkiG9w0BAQsFADAbMRkwFwYDVQQDExBoYXJi
    b3Itbm90YXJ5LWNhMB4XDTE5MDUwOTEzNTQxNFoXDTIwMDUwODEzNTQxNFowGzEZ
    MBcGA1UEAxMQaGFyYm9yLW5vdGFyeS1jYTCCASIwDQYJKoZIhvcNAQEBBQADggEP
    ADCCAQoCggEBAMOSZVKov5EBTRFdEqZO4C8O2L3Q+i4ai1cSmTqz1FipUic5NPRL
    ZMfOBP2yWlZiy34QPRDlBqLEgprztGVCBNdiceHU5MQpSN3PpN1KwzgnIbxHINck
    dR+GuzF/1IZYtVG2vSnL+IaqtLX+931k2scGnPgNE1DS1nNyZOtaAobhDAZN+x3j
    PmBcewYLupqAXlTOjoGRsg0+XKRrOWH9ipG3UJP9mJFR3GenC9n43F1jfsgtG03D
    lrQIGj1/BUU0JYl00LHPli6PFLLG7mrWdFI+G/0BUD1ztvIbQeubmi33ozs8Zs3V
    oo8SS7JwvgYHmwK1IcQcxZIpVl2q+zEL57kCAwEAAaNCMEAwDgYDVR0PAQH/BAQD
    AgKkMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTAD
    AQH/MA0GCSqGSIb3DQEBCwUAA4IBAQA+pTnwoLylHh34W1fb2u+DKO67lVrmjJF3
    TLdM8kdmqiNRDhrRC9faCrdstqvmogIMyj4DiwvbbKGrGI70ecixmpfBuDfwTTr9
    oAIp25ib9yKJpk0bZF5YwPdFX2o0Qltc3+dBLwdI9PH3jZ7bE/KbmETS9b99/S7P
    phNIeRog3FsqN+GRFNCcwQ75Gt9ZFC+iH1pZ/Pq0y2DAsOGt8OjRQYw851Csy15m
    +Xhn+HI+zAzgbODeFpXkQr2bR2squbRhvkOrXVsFndpD/UcMK+VODOsZMSvcF4cp
    u12Ia9+oodD6H+nRZrUrTDoDg8z/AFDvD/mDUXMazHl2MpPh3/cq
    -----END CERTIFICATE-----
    
  notary-signer.crt: |
    -----BEGIN CERTIFICATE-----
    MIIC+zCCAeOgAwIBAgIBATANBgkqhkiG9w0BAQsFADAbMRkwFwYDVQQDExBoYXJi
    b3Itbm90YXJ5LWNhMB4XDTE5MDUwOTEzNTQxNFoXDTIwMDUwODEzNTQxNFowJjEk
    MCIGA1UEAxMbaGFyYm9yLWhhcmJvci1ub3Rhcnktc2lnbmVyMIIBIjANBgkqhkiG
    9w0BAQEFAAOCAQ8AMIIBCgKCAQEAv3G+RD1k8oTq2XxQy2sZmqxxK6jlr3d8uywa
    eMFJUJs3SGTUe5JQxQ506NwwdWTrA0tdLmmpm2piodfOrqxwzDOgLfaUNmKw/2ME
    ysLDieD00kke9wRVq2KPiZQBrx0O6bjz/wAMXESzjmT7oeN099xAgSAyQ8UmI749
    jmM2wy4T43YAvjIFIAn5CNqMzOX0TOmdhkZ7Y9D3aMLQE2fopkg/tdP6o9L0X4j9
    PPLXzZ1TjZDF+F5Lb5Lhp4ZH2NQ0S/T3nh6ZSk11VPWOfb58Ylv+WMiVfa4M5HlZ
    T+XA5HbjTxi7UcYrz3vE/f80yWZEoPr49XJN1YzYUjEJeMnZ4QIDAQABoz8wPTAO
    BgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwG
    A1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggEBAIY2ysAeYFz+eYDoLwjrOxDY
    6gBGHp4n+6BmG2bsRv8OgiCKoPOk+a+vLMG8LX8oMKPDzHi+K9KqgHKu6HeR+evs
    gvokTrXTYOZW+NNoEx3IjEuLlmc/k9AbpdrTZaOzrRsHFhVxu/4cDcfyz/9Fayud
    hFAUhjvh2bilS6Y4GDFZgj6554iliGbZek0qRwqZ5CHMExfXM0fv79QR5n+o+Xwg
    XphFPjkfqeZjsM2MjplubKQS2mzgXROZc49C9Z2siBRuWvQ1fA8jKSMDF0HVMs9o
    /bisk9a/xP06de3U+qB6Tt7fPCZ6ho4ABQP2YooYxlr0NEyEnyHmAl+NfrmKAlY=
    -----END CERTIFICATE-----
    
  notary-signer.key: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEpAIBAAKCAQEAv3G+RD1k8oTq2XxQy2sZmqxxK6jlr3d8uywaeMFJUJs3SGTU
    e5JQxQ506NwwdWTrA0tdLmmpm2piodfOrqxwzDOgLfaUNmKw/2MEysLDieD00kke
    9wRVq2KPiZQBrx0O6bjz/wAMXESzjmT7oeN099xAgSAyQ8UmI749jmM2wy4T43YA
    vjIFIAn5CNqMzOX0TOmdhkZ7Y9D3aMLQE2fopkg/tdP6o9L0X4j9PPLXzZ1TjZDF
    +F5Lb5Lhp4ZH2NQ0S/T3nh6ZSk11VPWOfb58Ylv+WMiVfa4M5HlZT+XA5HbjTxi7
    UcYrz3vE/f80yWZEoPr49XJN1YzYUjEJeMnZ4QIDAQABAoIBAAhkexvQuTEshIMe
    QQh53Hh8YMWyNMd5bH1kFJEAoC8pbsX8rZfxNRs+Y/+lT3aGAwt07VPQi//lLQe9
    RzE/G/7HsJjzO1IbB3lapOYinaHYu8LQM8xOY1cNDg/Q7jX4ByRV2FRwcxpEZL60
    TJevOfx3qlg+yhVQejiM6XPpg4gQ1IWpIwshGu9lzRKEm5riX0wf/8REntjNsJu3
    Xu37Yd7NDED0OnFMtSbtUmiKbW1mwoJMDY+zLd9B+7yU8Nlw3cOYUNOm3UBkhV3I
    KZAuPlHwCi+26SMOCpLUOlwmjIc2u37oc6c9VtfWezHSdhwBwuK5n4r7hA2WUEcE
    j2CqO+UCgYEAxnNnzFTyQmnyZBZur4xUvTPTqsFqfkhDiUPlTgGMrQ5bGNkDjWYP
    eiUEFxv369eu6iOkmVwzL10n+K93HCOu0/e9S/oonN5tW/etZuIM1kdB7G24t7/T
    yd4KJ576v8YyelLey9IjbZW4zFAr+u7/BZoGrj3XMsynW2xoI7mpTrcCgYEA9vYw
    iWTeoUB/FJtOAMLuOaNDC5sIzGsTaH6B2aEFZJDOI2MkavdyLEs6jhrYtUPhxEvY
    DI3YdTpCuVYYIchrCdsG5GdOvmGPNnmR/g3xwpp9lvl9CJq6qZjaMWPZkX1/bH4O
    wivgkywCrc2qmZmLyf0EqdPvqdyUDrvUn8dcBCcCgYEApPUQ9tw1c9c1UNUEtI9l
    cNA/xdR4fPf8i4EQfkLzeHZSatkZBtQrUVCrkboB3tyt3Jo8G+5z7Y71xtWzoIRY
    soFfrGQIljydkrDSRo7oNMWOmsSporOljEsxDbYsoHRTSTLRV4MZR+IIdmy94hv/
    h9x8aSGmW+eZxXjbJ7cQcQkCgYBG+rMwigFCr1rW/VwJ8/ysLDRU3ZZFynClk9aW
    SiVWphfZK+GHrN7vxB9sQGMQlhYJaRMLaKlR6BDNW+VLsGKzTnRIqTiEl12l9oLz
    VeaqW+TEw6ggFPiZTglIML6ThlJdSE3NmPbO1dNfSMFDrFH1F/eDKBq142PaaDnQ
    Qmg7+QKBgQCSc1wdivZMw0WO15s0bbR4SGS6Ag9qkLh75S0LoYm2neX7sWY1Q+Sd
    bmKQWPqs9uRAnvL3zI6aLcRdsUIg6e+SLTFj8jrSr5KowZWZktbl3OebH4So/mzq
    s4r49nkwHY2ZH/16m2v0LNpm8LAcmIY/MVWWHjXV5X0xj849nbg4FA==
    -----END RSA PRIVATE KEY-----
    
  server-config.postgres.json: |
    {
      "server": {
        "http_addr": ":4443"
      },
      "trust_service": {
        "type": "remote",
        "hostname": "harbor-harbor-notary-signer",
        "port": "7899",
        "tls_ca_file": "./notary-signer-ca.crt",
        "key_algorithm": "ecdsa"
      },
      "logging": {
        "level": "debug"
      },
      "storage": {
        "backend": "postgres",
        "db_url": "postgres://postgres:changeit@harbor-harbor-database:5432/notaryserver?sslmode=disable"
      },
      "auth": {
          "type": "token",
          "options": {
              "realm": "http://127.0.0.1:30002/service/token",
              "service": "harbor-notary",
              "issuer": "harbor-token-issuer",
              "rootcertbundle": "/root.crt"
          }
      }
    }
  signer-config.postgres.json: |
    {
      "server": {
        "grpc_addr": ":7899",
        "tls_cert_file": "./notary-signer.crt",
        "tls_key_file": "./notary-signer.key"
      },
      "logging": {
        "level": "debug"
      },
      "storage": {
        "backend": "postgres",
        "db_url": "postgres://postgres:changeit@harbor-harbor-database:5432/notarysigner?sslmode=disable",
        "default_alias": "defaultalias"
      }
    }


---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: debug
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
    redis:
      addr: "harbor-harbor-redis:6379"
      password: 
      db: 2
    http:
      addr: :5000
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      token:
        issuer: harbor-token-issuer
        realm: "http://127.0.0.1:30002/service/token"
        rootcertbundle: /etc/registry/root.crt
        service: harbor-registry
    notifications:
      endpoints:
        - name: harbor
          disabled: false
          url: http://harbor-harbor-core/service/notifications
          timeout: 3000ms
          threshold: 5
          backoff: 1s
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: debug

---
# Source: harbor/templates/adminserver/adminserver-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-adminserver"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: adminserver
---
# Source: harbor/templates/clair/clair-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-clair"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6060
  selector:
    release: harbor
    app: "harbor"
    component: clair


---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: core

---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-database"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: harbor
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: jobservice

---
# Source: harbor/templates/notary/notary-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-notary-server
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 4443
  selector:
    release: harbor
    app: "harbor"
    component: notary-server

---
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-notary-signer
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 7899
  selector:
    release: harbor
    app: "harbor"
    component: notary-signer

---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-portal"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    release: harbor
    app: "harbor"
    component: portal

---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-redis
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: harbor
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: registry
      port: 5000
    - name: controller
      port: 8080
  selector:
    release: harbor
    app: "harbor"
    component: registry
---
# Source: harbor/templates/adminserver/adminserver-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-adminserver"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: adminserver
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: adminserver
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: adminserver
      annotations:
        checksum/configmap: 9d482423b63d0c92376e2dee27902109172675a6ab383613391b80b4be40b3eb
        checksum/secret: 1ec1bce946a4884b14334d24464b9fbba2652bfabf3da1dcca8901d1a86313ba
        checksum/secret-core: 331a355a34ed90e67b8e0bf3f847ad0359cf63f917f7bc3864bdcacbb4a7bc9d
        checksum/secret-jobservice: 8c5eb7cbda11c87f9bc32d048bada3918edcc673341adae4f980e76e16e218f6
    spec:
      containers:
      - name: adminserver
        image: "goharbor/harbor-adminserver:v1.7.0"
        imagePullPolicy: "IfNotPresent"
        livenessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        envFrom:
        - configMapRef:
            name: "harbor-harbor-adminserver"
        - secretRef:
            name: "harbor-harbor-adminserver"
        env:
          - name: PORT
            value: "8080"
          - name: JSON_CFG_STORE_PATH
            value: /etc/adminserver/config/config.json
          - name: KEY_PATH
            value: /etc/adminserver/key
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-core"
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-jobservice"
                key: secret
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: adminserver-key
          mountPath: /etc/adminserver/key
          subPath: key
      volumes:
      - name: adminserver-key
        secret:
          secretName: "harbor-harbor-adminserver"
          items:
          - key: secretKey
            path: key
---
# Source: harbor/templates/clair/clair-dpl.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-clair
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: clair
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: clair
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: clair
      annotations:
        checksum/configmap: 6276aba6568a256b0ae8faf4722952f4528fb91d5a5287ff165c07d3caf8297c
    spec:
      containers:
      - name: clair
        image: goharbor/clair-photon:v2.0.7-v1.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 30
          periodSeconds: 10
        args: ["-log-level", "debug"]
        env:
        - name: NO_PROXY
          value: "harbor-harbor-registry,harbor-harbor-core"
        resources:
          null
          
        ports:
        - containerPort: 6060
        volumeMounts:
        - name: clair-config
          mountPath: /etc/clair/config.yaml
          subPath: config.yaml
      volumes:
      - name: clair-config
        configMap:
          name: "harbor-harbor-clair"
          items:
            - key: config.yaml
              path: config.yaml


---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: 3b4121f192f68cd8015d18f223b9af3894de6aac6381660f1bc1b69db3239ba6
        checksum/secret: 41ab70d6d28e7d9171dba1053e91041523db6fb2d628dc472a5c2f43eff172a6
    spec:
      containers:
      - name: core
        image: goharbor/harbor-core:v1.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-jobservice"
                key: secret
          - name: _REDIS_URL
            value: harbor-harbor-redis:6379,100,
          - name: _REDIS_URL_REG
            value: redis://harbor-harbor-redis:6379/2
          - name: LOG_LEVEL
            value: debug
          - name: CONFIG_PATH
            value: /etc/core/app.conf
          - name: SYNC_REGISTRY
            value: "false"
          - name: ADMINSERVER_URL
            value: "http://harbor-harbor-adminserver"
          - name: CHART_CACHE_DRIVER
            value: "redis"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tokenServicePrivateKey
        - name: ca-download
          mountPath: /etc/core/ca/ca.crt
          subPath: ca.crt
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: harbor-harbor-core
      - name: secret-key
        secret:
          secretName: harbor-harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: harbor-harbor-core
      - name: ca-download
        secret:
          secretName: "harbor-harbor-ingress"
          items:
            - key: ca.crt
              path: ca.crt
      - name: psc
        emptyDir: {}

---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: 65a06469e8f69f18602f9d9083d4706b2e9c84b0ee71cec263f6068be30ae03d
        checksum/secret: 8bcff9cc8ff31a79fdc14fa2a16d93ba60d90f653e112acae28e9d948645626a
    spec:
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:v1.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        resources:
          null
          
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-jobservice"
                key: secret
          - name: ADMINSERVER_URL
            value: "http://harbor-harbor-adminserver"
          - name: REGISTRY_CONTROLLER_URL
            value: "http://harbor-harbor-registry:8080"
          - name: LOG_LEVEL
            value: debug
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: 
      volumes:
      - name: jobservice-config
        configMap:
          name: "harbor-harbor-jobservice"
      - name: job-logs
        emptyDir: {}

---
# Source: harbor/templates/notary/notary-server.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-notary-server
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: notary-server
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: notary-server
      annotations:
        checksum/configmap: 0987b5329d7143e9fd26f098b4ddc0a57e26ed81ea7bc984c42cff51f47decdb
    spec:
      containers:
      - name: notary-server
        image: goharbor/notary-server-photon:v0.6.1-v1.7.0
        imagePullPolicy: IfNotPresent
        resources:
          null
          
        env:
        - name: MIGRATIONS_PATH
          value: migrations/server/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-harbor-database:5432/notaryserver?sslmode=disable
        volumeMounts:
        - name: notary-config
          mountPath: /etc/notary
        - name: root-certificate
          mountPath: /root.crt
          subPath: tokenServiceRootCertBundle
      volumes:
      - name: notary-config
        configMap:
          name: "harbor-harbor-notary-server"
      - name: root-certificate
        secret:
          secretName: harbor-harbor-core


---
# Source: harbor/templates/notary/notary-signer.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-notary-signer
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: notary-signer
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: notary-signer
      annotations:
        checksum/configmap: 519c71493d8b2bcea9ce6f5b213addfedc5e8fce2047fecced1cf73fd0af1b65
    spec:
      containers:
      - name: notary-signer
        image: goharbor/notary-signer-photon:v0.6.1-v1.7.0
        imagePullPolicy: IfNotPresent
        resources:
          null
          
        env:
        - name: MIGRATIONS_PATH
          value: migrations/signer/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-harbor-database:5432/notarysigner?sslmode=disable
        - name: NOTARY_SIGNER_DEFAULTALIAS
          value: defaultalias
        volumeMounts:
        - name: notary-config
          mountPath: /etc/notary
      volumes:
      - name: notary-config
        configMap:
          name: "harbor-harbor-notary-server"


---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-portal"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: portal
      annotations:
    spec:
      containers:
      - name: portal
        image: goharbor/harbor-portal:v1.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 80

---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: 38d2d789c3f376c9af631ad9b4aadc0a946b2a6456d254023277e1b672eebb6d
        checksum/secret: 1104c4bd47c988bc5b97ad2c94c25162acaf52aec8885c7deaf7bcb5e2c6d7ba
    spec:
      containers:
      - name: registry
        image: goharbor/registry-photon:v2.6.2-v1.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-harbor-registry"
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-root-certificate
          mountPath: /etc/registry/root.crt
          subPath: tokenServiceRootCertBundle
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:v1.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-harbor-registry"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-jobservice"
                key: secret
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-root-certificate
        secret:
          secretName: harbor-harbor-core
      - name: registry-config
        configMap:
          name: "harbor-harbor-registry"
      - name: registry-data
        emptyDir: {}

---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "harbor-harbor-database"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "harbor-harbor-database"
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: 8accf53dfbf601db7e1b0fb79823d057c19b43014181ecc32c20f049f948b187
    spec:
      initContainers:
      - name: "remove-lost-found"
        image: goharbor/harbor-db:v1.7.0
        command: ["rm", "-Rf", "/var/lib/postgresql/data/lost+found"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
      containers:
      - name: database
        image: goharbor/harbor-db:v1.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        envFrom:
          - secretRef:
              name: "harbor-harbor-database"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
      volumes:
      - name: "database-data"
        emptyDir: {}
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-harbor-redis
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: harbor-harbor-redis
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      containers:
      - name: redis
        image: goharbor/redis-photon:v1.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath: 
      volumes:
      - name: data
        emptyDir: {}
---
# Source: harbor/templates/ingress/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: "harbor-harbor-ingress"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    
spec:
  tls:
  - hosts:
    - core.harbor.domain
    secretName: "harbor-harbor-ingress"
  - hosts:
    - notary.harbor.domain
    secretName: "harbor-harbor-ingress"
  rules:
  - host: core.harbor.domain
    http:
      paths:
      - path: /
        backend:
          serviceName: harbor-harbor-portal
          servicePort: 80
      - path: /api/
        backend:
          serviceName: harbor-harbor-core
          servicePort: 80
      - path: /service/
        backend:
          serviceName: harbor-harbor-core
          servicePort: 80
      - path: /v2/
        backend:
          serviceName: harbor-harbor-core
          servicePort: 80
      - path: /chartrepo/
        backend:
          serviceName: harbor-harbor-core
          servicePort: 80
      - path: /c/
        backend:
          serviceName: harbor-harbor-core
          servicePort: 80
  - host: notary.harbor.domain
    http:
      paths:
      - path: /
        backend:
          serviceName: harbor-harbor-notary-server
          servicePort: 4443
---
# Source: harbor/templates/chartmuseum/chartmuseum-cm.yaml

---
# Source: harbor/templates/chartmuseum/chartmuseum-dpl.yaml


---
# Source: harbor/templates/chartmuseum/chartmuseum-pvc.yaml

---
# Source: harbor/templates/chartmuseum/chartmuseum-secret.yaml

---
# Source: harbor/templates/chartmuseum/chartmuseum-svc.yaml

---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml

---
# Source: harbor/templates/nginx/configmap-http.yaml

    
---
# Source: harbor/templates/nginx/configmap-https.yaml

    
---
# Source: harbor/templates/nginx/deployment.yaml

---
# Source: harbor/templates/nginx/secret.yaml

---
# Source: harbor/templates/nginx/service.yaml

---
# Source: harbor/templates/registry/registry-pvc.yaml

